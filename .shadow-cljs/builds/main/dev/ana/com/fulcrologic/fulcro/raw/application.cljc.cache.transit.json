["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.fulcro.raw.application');\ngoog.scope(function(){\n  com.fulcrologic.fulcro.raw.application.goog$module$goog$object = goog.module.get('goog.object');\n});\n/**\n * Return the current basis time of the app.\n */\ncom.fulcrologic.fulcro.raw.application.basis_t = (function com$fulcrologic$fulcro$raw$application$basis_t(app__$1){\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"basis-t\",\"com.fulcrologic.fulcro.application/basis-t\",-1038783437).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1)));\n});\n/**\n * Get the current value of the application state database. If called without arguments it will attempt to find the app\n * in the dynamically-bound comp/*app*, which is bound during render.\n */\ncom.fulcrologic.fulcro.raw.application.current_state = (function com$fulcrologic$fulcro$raw$application$current_state(app_or_component){\nvar app__$1 = com.fulcrologic.fulcro.raw.components.any__GT_app(app_or_component);\nreturn cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app__$1));\n});\n/**\n * Move the basis-t forward one tick. For internal use in internal algorithms. Fulcro\n *   uses this to add metadata to props so it can detect the newer of two version of props.\n */\ncom.fulcrologic.fulcro.raw.application.tick_BANG_ = (function com$fulcrologic$fulcro$raw$application$tick_BANG_(app__$1){\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1),cljs.core.update,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"basis-t\",\"com.fulcrologic.fulcro.application/basis-t\",-1038783437),cljs.core.inc);\n});\n/**\n * Force shared props to be recalculated. This updates the shared props on the app, and future renders will see the\n * updated values. This is a no-op if no shared-fn is defined on the app. If you're using React 16+ consider using\n * Context instead of shared.\n */\ncom.fulcrologic.fulcro.raw.application.update_shared_BANG_ = (function com$fulcrologic$fulcro$raw$application$update_shared_BANG_(p__62035){\nvar map__62036 = p__62035;\nvar map__62036__$1 = cljs.core.__destructure_map(map__62036);\nvar app__$1 = map__62036__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62036__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\ntry{var temp__5751__auto__ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"shared-fn\",\"shared-fn\",-180260144));\nif(cljs.core.truth_(temp__5751__auto__)){\nvar shared_fn = temp__5751__auto__;\nvar shared = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"static-shared-props\",\"com.fulcrologic.fulcro.application/static-shared-props\",2140623498).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1)));\nvar state = com.fulcrologic.fulcro.raw.application.current_state(app__$1);\nvar root_class = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"root-class\",\"com.fulcrologic.fulcro.application/root-class\",-719803119).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1)));\nvar query = com.fulcrologic.fulcro.raw.components.get_query.cljs$core$IFn$_invoke$arity$2(root_class,state);\nvar v = com.fulcrologic.fulcro.algorithms.denormalize.db__GT_tree(query,state,state);\nvar shared_props = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([shared,(shared_fn.cljs$core$IFn$_invoke$arity$1 ? shared_fn.cljs$core$IFn$_invoke$arity$1(v) : shared_fn.call(null,v))], 0));\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"shared-props\",\"com.fulcrologic.fulcro.application/shared-props\",-554105157),shared_props);\n} else {\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"shared-props\",\"com.fulcrologic.fulcro.application/shared-props\",-554105157),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"static-shared-props\",\"com.fulcrologic.fulcro.application/static-shared-props\",2140623498).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1))));\n}\n}catch (e62037){var e = e62037;\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.raw.application\",null,59,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e,\"Cannot compute shared\"], null);\n}),null)),null,988956307,null);\n}});\n/**\n * Returns true if the props queries directly by the root component of the app (if mounted) have changed since the last\n *   render.  This is a shallow analysis such that, for example, a join from root (in a normalized db) will be checked as a difference\n *   of idents that the root prop points to.  This can be used for determining if things like shared-fn need to be re-run,\n *   and if it would simply be quicker to keyframe render the entire tree.\n * \n *   This is a naiv√© algorithm that is essentially `select-keys` on the root props. It does not interpret the query in\n *   any way.\n */\ncom.fulcrologic.fulcro.raw.application.root_props_changed_QMARK_ = (function com$fulcrologic$fulcro$raw$application$root_props_changed_QMARK_(app__$1){\nvar map__62091 = app__$1;\nvar map__62091__$1 = cljs.core.__destructure_map(map__62091);\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62091__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar state_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62091__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366));\nvar map__62092 = cljs.core.deref(runtime_atom);\nvar map__62092__$1 = cljs.core.__destructure_map(map__62092);\nvar root_class = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62092__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"root-class\",\"com.fulcrologic.fulcro.application/root-class\",-719803119));\nvar indexes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62092__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"indexes\",\"com.fulcrologic.fulcro.application/indexes\",-165326938));\nif(cljs.core.not(com.fulcrologic.fulcro.raw.components.get_query.cljs$core$IFn$_invoke$arity$2(root_class,cljs.core.deref(state_atom)))){\nreturn true;\n} else {\nvar state_map = cljs.core.deref(state_atom);\nvar prior_state_map = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"last-rendered-state\",\"com.fulcrologic.fulcro.application/last-rendered-state\",1438978441).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom));\nvar root_props = new cljs.core.Keyword(null,\"root-props\",\"root-props\",-1015460595).cljs$core$IFn$_invoke$arity$1(indexes);\nvar root_old = cljs.core.select_keys(prior_state_map,root_props);\nvar root_new = cljs.core.select_keys(state_map,root_props);\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(root_old,root_new);\n}\n});\n/**\n * Render the application immediately.  Prefer `schedule-render!`, which will ensure no more than 60fps.\n * \n *   This is the central processing for render and cannot be overridden. `schedule-render!` will always invoke\n *   this function.  The optimized render is called by this function, which does extra bookkeeping and\n *   other supporting features common to all rendering.\n * \n *   Options include:\n *   - `force-root?`: boolean.  When true disables all optimizations and forces a full root re-render.\n *   - anything your selected rendering optization system allows.  Shared props are updated via `shared-fn`\n *   only on `force-root?` and when (shallow) root props change.\n *   \n */\ncom.fulcrologic.fulcro.raw.application.render_BANG_ = (function com$fulcrologic$fulcro$raw$application$render_BANG_(var_args){\nvar G__62136 = arguments.length;\nswitch (G__62136) {\ncase 1:\nreturn com.fulcrologic.fulcro.raw.application.render_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.raw.application.render_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.raw.application.render_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app__$1){\nreturn com.fulcrologic.fulcro.raw.application.render_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"force-root?\",\"force-root?\",-1598741683),false], null));\n}));\n\n(com.fulcrologic.fulcro.raw.application.render_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,p__62145){\nvar map__62146 = p__62145;\nvar map__62146__$1 = cljs.core.__destructure_map(map__62146);\nvar options = map__62146__$1;\nvar force_root_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62146__$1,new cljs.core.Keyword(null,\"force-root?\",\"force-root?\",-1598741683));\ncom.fulcrologic.fulcro.raw.application.tick_BANG_(app__$1);\n\nvar map__62147 = app__$1;\nvar map__62147__$1 = cljs.core.__destructure_map(map__62147);\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62147__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar state_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62147__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366));\nvar map__62148 = (function (){var G__62149 = runtime_atom;\nif((G__62149 == null)){\nreturn null;\n} else {\nreturn cljs.core.deref(G__62149);\n}\n})();\nvar map__62148__$1 = cljs.core.__destructure_map(map__62148);\nvar root_class = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62148__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"root-class\",\"com.fulcrologic.fulcro.application/root-class\",-719803119));\nif(cljs.core.truth_(root_class)){\nvar core_render_BANG__62225 = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"core-render!\",\"core-render!\",1128819499));\nvar root_props_changed_QMARK__62226 = com.fulcrologic.fulcro.raw.application.root_props_changed_QMARK_(app__$1);\nif(cljs.core.truth_((function (){var or__4253__auto__ = force_root_QMARK_;\nif(cljs.core.truth_(or__4253__auto__)){\nreturn or__4253__auto__;\n} else {\nreturn root_props_changed_QMARK__62226;\n}\n})())){\ncom.fulcrologic.fulcro.raw.application.update_shared_BANG_(app__$1);\n} else {\n}\n\nif(cljs.core.truth_(core_render_BANG__62225)){\nvar G__62152_62228 = app__$1;\nvar G__62153_62229 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([options,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"root-props-changed?\",\"root-props-changed?\",1999614835),root_props_changed_QMARK__62226], null)], 0));\n(core_render_BANG__62225.cljs$core$IFn$_invoke$arity$2 ? core_render_BANG__62225.cljs$core$IFn$_invoke$arity$2(G__62152_62228,G__62153_62229) : core_render_BANG__62225.call(null,G__62152_62228,G__62153_62229));\n} else {\n}\n\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(runtime_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"last-rendered-state\",\"com.fulcrologic.fulcro.application/last-rendered-state\",1438978441),cljs.core.deref(state_atom),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"only-refresh\",\"com.fulcrologic.fulcro.application/only-refresh\",1300408206),cljs.core.PersistentHashSet.EMPTY,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"to-refresh\",\"com.fulcrologic.fulcro.application/to-refresh\",-967758829),cljs.core.PersistentHashSet.EMPTY], 0));\n} else {\n}\n\nvar batch_notifications = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"batch-notifications\",\"batch-notifications\",1250364860));\nvar notify_all_BANG_ = (function (){\nvar seq__62155 = cljs.core.seq(cljs.core.vals(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"render-listeners\",\"com.fulcrologic.fulcro.application/render-listeners\",-684979123).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom))));\nvar chunk__62156 = null;\nvar count__62157 = (0);\nvar i__62158 = (0);\nwhile(true){\nif((i__62158 < count__62157)){\nvar render_listener = chunk__62156.cljs$core$IIndexed$_nth$arity$2(null,i__62158);\ntry{(render_listener.cljs$core$IFn$_invoke$arity$2 ? render_listener.cljs$core$IFn$_invoke$arity$2(app__$1,options) : render_listener.call(null,app__$1,options));\n}catch (e62162){var e_62230 = e62162;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.raw.application\",null,115,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__62155,chunk__62156,count__62157,i__62158,e_62230,render_listener,batch_notifications,map__62147,map__62147__$1,runtime_atom,state_atom,map__62148,map__62148__$1,root_class,map__62146,map__62146__$1,options,force_root_QMARK_){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_62230,\"Render listener failed. See https://book.fulcrologic.com/#err-render-listener-failed\"], null);\n});})(seq__62155,chunk__62156,count__62157,i__62158,e_62230,render_listener,batch_notifications,map__62147,map__62147__$1,runtime_atom,state_atom,map__62148,map__62148__$1,root_class,map__62146,map__62146__$1,options,force_root_QMARK_))\n,null)),null,-33636969,null);\n}\n\nvar G__62232 = seq__62155;\nvar G__62233 = chunk__62156;\nvar G__62234 = count__62157;\nvar G__62235 = (i__62158 + (1));\nseq__62155 = G__62232;\nchunk__62156 = G__62233;\ncount__62157 = G__62234;\ni__62158 = G__62235;\ncontinue;\n} else {\nvar temp__5753__auto__ = cljs.core.seq(seq__62155);\nif(temp__5753__auto__){\nvar seq__62155__$1 = temp__5753__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__62155__$1)){\nvar c__4679__auto__ = cljs.core.chunk_first(seq__62155__$1);\nvar G__62236 = cljs.core.chunk_rest(seq__62155__$1);\nvar G__62237 = c__4679__auto__;\nvar G__62238 = cljs.core.count(c__4679__auto__);\nvar G__62239 = (0);\nseq__62155 = G__62236;\nchunk__62156 = G__62237;\ncount__62157 = G__62238;\ni__62158 = G__62239;\ncontinue;\n} else {\nvar render_listener = cljs.core.first(seq__62155__$1);\ntry{(render_listener.cljs$core$IFn$_invoke$arity$2 ? render_listener.cljs$core$IFn$_invoke$arity$2(app__$1,options) : render_listener.call(null,app__$1,options));\n}catch (e62163){var e_62240 = e62163;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.raw.application\",null,115,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__62155,chunk__62156,count__62157,i__62158,e_62240,render_listener,seq__62155__$1,temp__5753__auto__,batch_notifications,map__62147,map__62147__$1,runtime_atom,state_atom,map__62148,map__62148__$1,root_class,map__62146,map__62146__$1,options,force_root_QMARK_){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_62240,\"Render listener failed. See https://book.fulcrologic.com/#err-render-listener-failed\"], null);\n});})(seq__62155,chunk__62156,count__62157,i__62158,e_62240,render_listener,seq__62155__$1,temp__5753__auto__,batch_notifications,map__62147,map__62147__$1,runtime_atom,state_atom,map__62148,map__62148__$1,root_class,map__62146,map__62146__$1,options,force_root_QMARK_))\n,null)),null,-456934973,null);\n}\n\nvar G__62241 = cljs.core.next(seq__62155__$1);\nvar G__62242 = null;\nvar G__62243 = (0);\nvar G__62244 = (0);\nseq__62155 = G__62241;\nchunk__62156 = G__62242;\ncount__62157 = G__62243;\ni__62158 = G__62244;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n});\nif(cljs.core.truth_(batch_notifications)){\nreturn (batch_notifications.cljs$core$IFn$_invoke$arity$1 ? batch_notifications.cljs$core$IFn$_invoke$arity$1(notify_all_BANG_) : batch_notifications.call(null,notify_all_BANG_));\n} else {\nreturn notify_all_BANG_();\n}\n}));\n\n(com.fulcrologic.fulcro.raw.application.render_BANG_.cljs$lang$maxFixedArity = 2);\n\nvar go_BANG__62245 = goog.functions.debounce((function (app__$1,options){\nreturn com.fulcrologic.fulcro.algorithms.scheduling.schedule_animation_BANG_(app__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"render-scheduled?\",\"com.fulcrologic.fulcro.application/render-scheduled?\",1784576350),(function (){\nreturn com.fulcrologic.fulcro.raw.application.render_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,options);\n}));\n}),(16));\n/**\n * Schedule a render on the next animation frame.\n */\ncom.fulcrologic.fulcro.raw.application.schedule_render_BANG_ = (function com$fulcrologic$fulcro$raw$application$schedule_render_BANG_(var_args){\nvar G__62167 = arguments.length;\nswitch (G__62167) {\ncase 1:\nreturn com.fulcrologic.fulcro.raw.application.schedule_render_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.raw.application.schedule_render_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.raw.application.schedule_render_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app__$1){\nreturn com.fulcrologic.fulcro.raw.application.schedule_render_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"force-root?\",\"force-root?\",-1598741683),false], null));\n}));\n\n(com.fulcrologic.fulcro.raw.application.schedule_render_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,options){\nreturn (go_BANG__62245.cljs$core$IFn$_invoke$arity$2 ? go_BANG__62245.cljs$core$IFn$_invoke$arity$2(app__$1,options) : go_BANG__62245.call(null,app__$1,options));\n}));\n\n(com.fulcrologic.fulcro.raw.application.schedule_render_BANG_.cljs$lang$maxFixedArity = 2);\n\n/**\n * Default detection of network errors. Returns true if the status-code of the given result\n *   map is not 200.\n */\ncom.fulcrologic.fulcro.raw.application.default_remote_error_QMARK_ = (function com$fulcrologic$fulcro$raw$application$default_remote_error_QMARK_(p__62169){\nvar map__62170 = p__62169;\nvar map__62170__$1 = cljs.core.__destructure_map(map__62170);\nvar status_code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62170__$1,new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130));\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2((200),status_code);\n});\n/**\n * The default query transform function.  It makes sure the following items on a component query\n *   are never sent to the server:\n * \n *   - Props whose namespace is `ui`\n *   - Any prop or join that is namespaced to com.fulcrologic.fulcro*\n *   - Any ident (as a prop or join) whose table name is namespaced ui or com.fulcrologic.fulcro*\n * \n *   Takes an AST and returns the modified AST.\n *   \n */\ncom.fulcrologic.fulcro.raw.application.default_global_eql_transform = (function com$fulcrologic$fulcro$raw$application$default_global_eql_transform(ast){\nvar kw_namespace = (function (k){\nvar and__4251__auto__ = (k instanceof cljs.core.Keyword);\nif(and__4251__auto__){\nreturn cljs.core.namespace(k);\n} else {\nreturn and__4251__auto__;\n}\n});\nreturn com.fulcrologic.fulcro.data_fetch.elide_ast_nodes(ast,(function (k){\nvar ns = (function (){var G__62172 = k;\nif((G__62172 == null)){\nreturn null;\n} else {\nreturn kw_namespace(G__62172);\n}\n})();\nvar ident_ns = ((edn_query_language.core.ident_QMARK_(k))?(function (){var G__62174 = cljs.core.first(k);\nif((G__62174 == null)){\nreturn null;\n} else {\nreturn kw_namespace(G__62174);\n}\n})():null);\nreturn ((((typeof ns === 'string') && (((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"ui\",ns)) || (clojure.string.starts_with_QMARK_(ns,\"com.fulcrologic.fulcro.\")))))) || (((typeof ident_ns === 'string') && (((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"ui\",ident_ns)) || (clojure.string.starts_with_QMARK_(ident_ns,\"com.fulcrologic.fulcro.\")))))));\n}));\n});\n/**\n * Initialize the app state using `root` component's app state. This will deep merge against any data that is already\n *   in the state atom of the app. Can be called before `mount!`, in which case you should tell mount not to (re) initialize\n *   state.\n */\ncom.fulcrologic.fulcro.raw.application.initialize_state_BANG_ = (function com$fulcrologic$fulcro$raw$application$initialize_state_BANG_(app__$1,root){\nif(cljs.core.truth_(goog.DEBUG)){\ncom.fulcrologic.fulcro.raw.components.check_component_registry_BANG_();\n} else {\n}\n\nvar initial_db = cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app__$1));\nvar root_query = com.fulcrologic.fulcro.raw.components.get_query.cljs$core$IFn$_invoke$arity$2(root,initial_db);\nvar _ = com.fulcrologic.fulcro.algorithms.do_not_use.dev_check_query(root_query,com.fulcrologic.fulcro.raw.components.component_name);\nvar initial_tree = com.fulcrologic.fulcro.raw.components.get_initial_state.cljs$core$IFn$_invoke$arity$1(root);\nvar db_from_ui = (cljs.core.truth_(root_query)?com.fulcrologic.fulcro.algorithms.merge.merge_alternate_union_elements(com.fulcrologic.fulcro.algorithms.normalize.tree__GT_db.cljs$core$IFn$_invoke$arity$4(root_query,initial_tree,true,com.fulcrologic.fulcro.algorithms.merge.pre_merge_transform.cljs$core$IFn$_invoke$arity$1(initial_tree)),root):initial_tree);\nvar db = com.fulcrologic.fulcro.algorithms.do_not_use.deep_merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([initial_db,db_from_ui], 0));\nreturn cljs.core.reset_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app__$1),db);\n});\ncom.fulcrologic.fulcro.raw.application.default_tx_BANG_ = com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_;\n/**\n * Create a new Fulcro application. See com.fulcrologic.fulcro.application/fulcro-app for the React-based initializer.\n * \n *   This version creates an app that is not attached to React, and has no default root or optimized render. The\n *   map of initial options is the same *except* that react-centric options are obviously ignore, and also:\n * \n * * `:optimized-render!` - A `(fn ([app]) ([app txn-options]))` that can analyze the state of the application and optimally refresh the screen. Defaults to a no-op.\n *   This function is normally called from core-render!, and therefore is useless unless you define a `core-render!` that calls it.\n * * `:core-render!` - A (fn [app txn-options] side-effect) that is called by schedule render. If you fail to supply this on a raw app, then\n *   NO rendering will happen; however, render listeners will still be called.\n * * `:batch-notifications` - A side-effecting function `(fn [notify-all])` that can surround a batch of render notifiations with a context. The only\n *   argument to this function is `notify-all`, which is a function that will do the actual notifications. This is useful when using render\n *   notifications with React hooks, and need to tell React that a bunch of state changes need to happen together. The\n *   normal setting for this (if you're using hooks and render listeners) is\n *   `(fn [render!] (react-dom/unstable_batchedUpdates render!))` or\n *   `(fn [render!] (react-native/unstable_batchedUpdates render!))`.\n * \n *   Note that raw apps are not mounted, but are instead ready to be used immediately.  If you want to use inspect, then\n *   you must call `(inspect/client-started! app)` yourself.\n * \n *   Indexing is available, but normally runs from React lifecycle, so unless you're using this with React indexes will be non-managed.\n *   \n */\ncom.fulcrologic.fulcro.raw.application.fulcro_app = (function com$fulcrologic$fulcro$raw$application$fulcro_app(var_args){\nvar G__62180 = arguments.length;\nswitch (G__62180) {\ncase 0:\nreturn com.fulcrologic.fulcro.raw.application.fulcro_app.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn com.fulcrologic.fulcro.raw.application.fulcro_app.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.raw.application.fulcro_app.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn com.fulcrologic.fulcro.raw.application.fulcro_app.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.raw.application.fulcro_app.cljs$core$IFn$_invoke$arity$1 = (function (p__62182){\nvar map__62183 = p__62182;\nvar map__62183__$1 = cljs.core.__destructure_map(map__62183);\nvar options = map__62183__$1;\nvar default_result_action_BANG_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62183__$1,new cljs.core.Keyword(null,\"default-result-action!\",\"default-result-action!\",-622954374));\nvar external_config = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62183__$1,new cljs.core.Keyword(null,\"external-config\",\"external-config\",-471423941));\nvar batch_notifications = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62183__$1,new cljs.core.Keyword(null,\"batch-notifications\",\"batch-notifications\",1250364860));\nvar global_error_action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62183__$1,new cljs.core.Keyword(null,\"global-error-action\",\"global-error-action\",-924822372));\nvar render_middleware = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62183__$1,new cljs.core.Keyword(null,\"render-middleware\",\"render-middleware\",1183628797));\nvar unmount_root_BANG_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62183__$1,new cljs.core.Keyword(null,\"unmount-root!\",\"unmount-root!\",1516744861));\nvar client_did_mount = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62183__$1,new cljs.core.Keyword(null,\"client-did-mount\",\"client-did-mount\",-958324226));\nvar initial_db = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62183__$1,new cljs.core.Keyword(null,\"initial-db\",\"initial-db\",1939835102));\nvar query_transform_default = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62183__$1,new cljs.core.Keyword(null,\"query-transform-default\",\"query-transform-default\",-1684574273));\nvar props_middleware = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62183__$1,new cljs.core.Keyword(null,\"props-middleware\",\"props-middleware\",358176739));\nvar load_mutation = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62183__$1,new cljs.core.Keyword(null,\"load-mutation\",\"load-mutation\",-2132703225));\nvar remotes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62183__$1,new cljs.core.Keyword(null,\"remotes\",\"remotes\",1132366312));\nvar core_render_BANG_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62183__$1,new cljs.core.Keyword(null,\"core-render!\",\"core-render!\",1128819499));\nvar client_will_mount = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62183__$1,new cljs.core.Keyword(null,\"client-will-mount\",\"client-will-mount\",-2138714037));\nvar hydrate_root_BANG_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62183__$1,new cljs.core.Keyword(null,\"hydrate-root!\",\"hydrate-root!\",-184171028));\nvar global_eql_transform = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62183__$1,new cljs.core.Keyword(null,\"global-eql-transform\",\"global-eql-transform\",145441548));\nvar shared_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62183__$1,new cljs.core.Keyword(null,\"shared-fn\",\"shared-fn\",-180260144));\nvar load_marker_default = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62183__$1,new cljs.core.Keyword(null,\"load-marker-default\",\"load-marker-default\",335781105));\nvar render_root_BANG_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62183__$1,new cljs.core.Keyword(null,\"render-root!\",\"render-root!\",820937651));\nvar optimized_render_BANG_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62183__$1,new cljs.core.Keyword(null,\"optimized-render!\",\"optimized-render!\",1504010964));\nvar submit_transaction_BANG_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62183__$1,new cljs.core.Keyword(null,\"submit-transaction!\",\"submit-transaction!\",554065589));\nvar abort_transaction_BANG_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62183__$1,new cljs.core.Keyword(null,\"abort-transaction!\",\"abort-transaction!\",-1430666634));\nvar root_class = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62183__$1,new cljs.core.Keyword(null,\"root-class\",\"root-class\",-267672298));\nvar remote_error_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62183__$1,new cljs.core.Keyword(null,\"remote-error?\",\"remote-error?\",-391127497));\nvar shared = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62183__$1,new cljs.core.Keyword(null,\"shared\",\"shared\",-384145993));\nvar tx_BANG_ = (function (){var or__4253__auto__ = submit_transaction_BANG_;\nif(cljs.core.truth_(or__4253__auto__)){\nreturn or__4253__auto__;\n} else {\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_;\n}\n})();\nreturn new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"id\",\"com.fulcrologic.fulcro.application/id\",-2008968625),com.fulcrologic.fulcro.algorithms.tempid.uuid.cljs$core$IFn$_invoke$arity$0(),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366),cljs.core.atom.cljs$core$IFn$_invoke$arity$1((function (){var or__4253__auto__ = initial_db;\nif(cljs.core.truth_(or__4253__auto__)){\nreturn or__4253__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})()),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"config\",\"com.fulcrologic.fulcro.application/config\",-1907926684),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,\"load-marker-default\",\"load-marker-default\",335781105),load_marker_default,new cljs.core.Keyword(null,\"client-did-mount\",\"client-did-mount\",-958324226),(function (){var or__4253__auto__ = client_did_mount;\nif(cljs.core.truth_(or__4253__auto__)){\nreturn or__4253__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"started-callback\",\"started-callback\",-1798586951).cljs$core$IFn$_invoke$arity$1(options);\n}\n})(),new cljs.core.Keyword(null,\"client-will-mount\",\"client-will-mount\",-2138714037),client_will_mount,new cljs.core.Keyword(null,\"external-config\",\"external-config\",-471423941),external_config,new cljs.core.Keyword(null,\"query-transform-default\",\"query-transform-default\",-1684574273),query_transform_default,new cljs.core.Keyword(null,\"load-mutation\",\"load-mutation\",-2132703225),load_mutation], null),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"algorithms\",\"com.fulcrologic.fulcro.application/algorithms\",-397334538),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"initialize-state!\",\"com.fulcrologic.fulcro.algorithm/initialize-state!\",738545984),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"render!\",\"com.fulcrologic.fulcro.algorithm/render!\",-551944092),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"shared-fn\",\"com.fulcrologic.fulcro.algorithm/shared-fn\",1998173092),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"default-result-action!\",\"com.fulcrologic.fulcro.algorithm/default-result-action!\",762427430),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"props-middleware\",\"com.fulcrologic.fulcro.algorithm/props-middleware\",-1561487353),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"batch-notifications\",\"com.fulcrologic.fulcro.algorithm/batch-notifications\",-1122314904),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"schedule-render!\",\"com.fulcrologic.fulcro.algorithm/schedule-render!\",-881414518),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"abort!\",\"com.fulcrologic.fulcro.algorithm/abort!\",1698846123),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"tx!\",\"com.fulcrologic.fulcro.algorithm/tx!\",1081877133),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"core-render!\",\"com.fulcrologic.fulcro.algorithm/core-render!\",-1245238577),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"global-eql-transform\",\"com.fulcrologic.fulcro.algorithm/global-eql-transform\",2048820336),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"drop-component!\",\"com.fulcrologic.fulcro.algorithm/drop-component!\",2089631024),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"hydrate-root!\",\"com.fulcrologic.fulcro.algorithm/hydrate-root!\",-974092720),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"index-component!\",\"com.fulcrologic.fulcro.algorithm/index-component!\",1187330736),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"unmount-root!\",\"com.fulcrologic.fulcro.algorithm/unmount-root!\",-841125583),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"remote-error?\",\"com.fulcrologic.fulcro.algorithm/remote-error?\",-1675354477),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"render-root!\",\"com.fulcrologic.fulcro.algorithm/render-root!\",1033047),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"global-error-action\",\"com.fulcrologic.fulcro.algorithm/global-error-action\",1947538456),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"optimized-render!\",\"com.fulcrologic.fulcro.algorithm/optimized-render!\",-902323400),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"render-middleware\",\"com.fulcrologic.fulcro.algorithm/render-middleware\",-1105723495),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"index-root!\",\"com.fulcrologic.fulcro.algorithm/index-root!\",1394342330),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"merge*\",\"com.fulcrologic.fulcro.algorithm/merge*\",-1505158659)],[com.fulcrologic.fulcro.raw.application.initialize_state_BANG_,com.fulcrologic.fulcro.raw.application.render_BANG_,shared_fn,(function (){var or__4253__auto__ = default_result_action_BANG_;\nif(cljs.core.truth_(or__4253__auto__)){\nreturn or__4253__auto__;\n} else {\nreturn com.fulcrologic.fulcro.mutations.default_result_action_BANG_;\n}\n})(),props_middleware,batch_notifications,com.fulcrologic.fulcro.raw.application.schedule_render_BANG_,(function (){var or__4253__auto__ = abort_transaction_BANG_;\nif(cljs.core.truth_(or__4253__auto__)){\nreturn or__4253__auto__;\n} else {\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.abort_BANG_;\n}\n})(),tx_BANG_,(function (){var or__4253__auto__ = core_render_BANG_;\nif(cljs.core.truth_(or__4253__auto__)){\nreturn or__4253__auto__;\n} else {\nreturn cljs.core.identity;\n}\n})(),(function (){var or__4253__auto__ = global_eql_transform;\nif(cljs.core.truth_(or__4253__auto__)){\nreturn or__4253__auto__;\n} else {\nreturn com.fulcrologic.fulcro.raw.application.default_global_eql_transform;\n}\n})(),com.fulcrologic.fulcro.algorithms.indexing.drop_component_BANG_,hydrate_root_BANG_,com.fulcrologic.fulcro.algorithms.indexing.index_component_BANG_,unmount_root_BANG_,(function (){var or__4253__auto__ = remote_error_QMARK_;\nif(cljs.core.truth_(or__4253__auto__)){\nreturn or__4253__auto__;\n} else {\nreturn com.fulcrologic.fulcro.raw.application.default_remote_error_QMARK_;\n}\n})(),render_root_BANG_,global_error_action,(function (){var or__4253__auto__ = optimized_render_BANG_;\nif(cljs.core.truth_(or__4253__auto__)){\nreturn or__4253__auto__;\n} else {\nreturn cljs.core.identity;\n}\n})(),render_middleware,com.fulcrologic.fulcro.algorithms.indexing.index_root_BANG_,com.fulcrologic.fulcro.algorithms.merge.merge_STAR_]),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772),cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"mount-node\",\"com.fulcrologic.fulcro.application/mount-node\",557976672),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"queue-processing-scheduled?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/queue-processing-scheduled?\",-2065549690),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"indexes\",\"com.fulcrologic.fulcro.application/indexes\",-165326938),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"last-rendered-state\",\"com.fulcrologic.fulcro.application/last-rendered-state\",1438978441),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"static-shared-props\",\"com.fulcrologic.fulcro.application/static-shared-props\",2140623498),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"sends-scheduled?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/sends-scheduled?\",-844941333),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"render-listeners\",\"com.fulcrologic.fulcro.application/render-listeners\",-684979123),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"root-class\",\"com.fulcrologic.fulcro.application/root-class\",-719803119),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"basis-t\",\"com.fulcrologic.fulcro.application/basis-t\",-1038783437),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"mutate\",\"com.fulcrologic.fulcro.application/mutate\",-406635431),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"root-factory\",\"com.fulcrologic.fulcro.application/root-factory\",1202626682),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"shared-props\",\"com.fulcrologic.fulcro.application/shared-props\",-554105157),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"activation-scheduled?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/activation-scheduled?\",-955561668),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app-root\",\"com.fulcrologic.fulcro.application/app-root\",835379005)],[null,false,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"ident->components\",\"ident->components\",-1952169224),cljs.core.PersistentArrayMap.EMPTY], null),cljs.core.PersistentArrayMap.EMPTY,shared,false,(function (){var G__62187 = cljs.core.PersistentArrayMap.EMPTY;\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(tx_BANG_,com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__62187,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"after-render\",\"com.fulcrologic.fulcro.algorithms.tx-processing/after-render\",349495132),com.fulcrologic.fulcro.algorithms.tx_processing.application_rendered_BANG_);\n} else {\nreturn G__62187;\n}\n})(),root_class,(1),cljs.core.PersistentVector.EMPTY,cljs.core.PersistentVector.EMPTY,com.fulcrologic.fulcro.mutations.mutate,cljs.core.PersistentArrayMap.EMPTY,null,cljs.core.PersistentArrayMap.EMPTY,false,(function (){var or__4253__auto__ = remotes;\nif(cljs.core.truth_(or__4253__auto__)){\nreturn or__4253__auto__;\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"transmit!\",\"transmit!\",-107149039),(function (p__62189){\nvar map__62190 = p__62189;\nvar map__62190__$1 = cljs.core.__destructure_map(map__62190);\nvar result_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62190__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209));\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"fatal\",\"fatal\",1874419888),\"com.fulcrologic.fulcro.raw.application\",null,276,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Remote requested, but no remote defined.\"], null);\n}),null)),null,-856616696,null);\n\nvar G__62191 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(418),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.core.PersistentArrayMap.EMPTY], null);\nreturn (result_handler.cljs$core$IFn$_invoke$arity$1 ? result_handler.cljs$core$IFn$_invoke$arity$1(G__62191) : result_handler.call(null,G__62191));\n})], null)], null);\n}\n})(),null]))], null);\n}));\n\n(com.fulcrologic.fulcro.raw.application.fulcro_app.cljs$lang$maxFixedArity = 1);\n\n/**\n * Returns true if the given `x` is a Fulcro application.\n */\ncom.fulcrologic.fulcro.raw.application.fulcro_app_QMARK_ = (function com$fulcrologic$fulcro$raw$application$fulcro_app_QMARK_(x){\nreturn cljs.core.boolean$(((cljs.core.map_QMARK_(x)) && (((cljs.core.contains_QMARK_(x,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366))) && (cljs.core.contains_QMARK_(x,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772)))))));\n});\n/**\n * Attempt to abort the send queue entries with the given abort ID.\n * \n *   NOTE: This can be redefined on an application. If you change your transaction processing routing, then the built-in\n *   version will not work, and this docstring does not apply.\n * \n *   Will notify any aborted operations (e.g. result-handler\n *   will be invoked, remote-error? will be used to decide if you consider that an error, etc.).\n *   The result map from an abort will include `{::txn/aborted? true}`, but will not include `:status-code` or `:body`.\n * \n *   This function affects both started and non-started items in the send queues, but will not affect submissions that have not yet\n *   made it to the network processing layer (things still in top-level transaction submission queue).\n * \n *   So the sequence of calls:\n * \n *   ```\n *   (comp/transact! this `[(f)] {:abort-id :a})\n *   (app/abort! this :a)\n *   ```\n * \n *   will cancel anything active with abort id `:a`, but since you've held the thread the entire time the submission of\n *   mutation `(f)` is still on the submission queue and will not be aborted.\n * \n *   - `app-ish`: Anything that can be coerced to an app with comp/any->app.\n *   - `abort-id`: The abort ID of the operations to be aborted.\n *   \n */\ncom.fulcrologic.fulcro.raw.application.abort_BANG_ = (function com$fulcrologic$fulcro$raw$application$abort_BANG_(app_ish,abort_id){\nvar app__$1 = com.fulcrologic.fulcro.raw.components.any__GT_app(app_ish);\nvar temp__5753__auto__ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"abort!\",\"abort!\",-220883953));\nif(cljs.core.truth_(temp__5753__auto__)){\nvar abort_BANG_ = temp__5753__auto__;\nreturn (abort_BANG_.cljs$core$IFn$_invoke$arity$2 ? abort_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,abort_id) : abort_BANG_.call(null,app__$1,abort_id));\n} else {\nreturn null;\n}\n});\n/**\n * Add (or replace) a render listener named `nm`. `listener` is a `(fn [app options] )` that will be called\n * after each render.\n * \n * See the `:batch-notifications` option of the application, which can be set when using certain verions of React to\n * improve performance and reduce over-rendering.\n */\ncom.fulcrologic.fulcro.raw.application.add_render_listener_BANG_ = (function com$fulcrologic$fulcro$raw$application$add_render_listener_BANG_(app__$1,nm,listener){\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1),cljs.core.assoc_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"render-listeners\",\"com.fulcrologic.fulcro.application/render-listeners\",-684979123),nm], null),listener);\n});\n/**\n * Remove the render listener named `nm`.\n */\ncom.fulcrologic.fulcro.raw.application.remove_render_listener_BANG_ = (function com$fulcrologic$fulcro$raw$application$remove_render_listener_BANG_(app__$1,nm){\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1),cljs.core.update,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"render-listeners\",\"com.fulcrologic.fulcro.application/render-listeners\",-684979123),cljs.core.dissoc,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([nm], 0));\n});\n/**\n * Returns a new instance from `fulcro-app` that is pre-configured to use synchronous transaction processing\n * and no rendering. This is particularly useful when you want to write integration tests around a Fulcro\n * app so that the tests need no async support. The `faux-root` must be a component (which need have no body).\n * \n * The returned application will be properly initialized, and will have the initial state declared in `faux-component`\n * already merged into the app's state (i.e. the returned app is ready for operations).\n * \n * `options` can be anything from `fulcro-app`, but :submit-transaction!, :render-root!, and\n * :optimized-render! are ignored.\n */\ncom.fulcrologic.fulcro.raw.application.headless_synchronous_app = (function com$fulcrologic$fulcro$raw$application$headless_synchronous_app(var_args){\nvar G__62197 = arguments.length;\nswitch (G__62197) {\ncase 1:\nreturn com.fulcrologic.fulcro.raw.application.headless_synchronous_app.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.raw.application.headless_synchronous_app.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.raw.application.headless_synchronous_app.cljs$core$IFn$_invoke$arity$1 = (function (faux_root){\nreturn com.fulcrologic.fulcro.raw.application.headless_synchronous_app.cljs$core$IFn$_invoke$arity$2(faux_root,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.raw.application.headless_synchronous_app.cljs$core$IFn$_invoke$arity$2 = (function (faux_root,options){\nvar app__$1 = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.with_synchronous_transactions(com.fulcrologic.fulcro.raw.application.fulcro_app.cljs$core$IFn$_invoke$arity$1(cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([options,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"render-root!\",\"render-root!\",820937651),cljs.core.constantly(true),new cljs.core.Keyword(null,\"optimized-render!\",\"optimized-render!\",1504010964),cljs.core.constantly(true)], null)], 0))));\ncom.fulcrologic.fulcro.raw.application.initialize_state_BANG_(app__$1,faux_root);\n\nreturn app__$1;\n}));\n\n(com.fulcrologic.fulcro.raw.application.headless_synchronous_app.cljs$lang$maxFixedArity = 2);\n\n/**\n * Add/replace a remote on the given app. `remote-name` is a keyword, and `remote` is a Fulcro remote (map containing\n *   at least `transmit!`).\n * \n *   This function is *generally* safe to call at any time. Requests that are in-flight on an old version of the remote will complete\n *   on that remote, and any that are queued will be processed by the new one; however, if the old remote supported abort\n *   operations then an abort on in-flight requests of the old remote will not work (since you're replaced the remote that the details\n *   about that request).\n * \n *   This function changes the content of the application's runtime atom so you do not need to capture the return value, which\n *   is the app you passed in.\n */\ncom.fulcrologic.fulcro.raw.application.set_remote_BANG_ = (function com$fulcrologic$fulcro$raw$application$set_remote_BANG_(app__$1,remote_name,remote){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1),cljs.core.assoc_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517),remote_name], null),remote);\n\nreturn app__$1;\n});\n/**\n * Uses `fdn/traced-db->tree` to get the props of the subtree at `root-key`. If `prior-props` are not stale, those are\n * returned instead.\n */\ncom.fulcrologic.fulcro.raw.application.get_root_subtree_props = (function com$fulcrologic$fulcro$raw$application$get_root_subtree_props(app__$1,root_key,component,prior_props){\nvar state_map = com.fulcrologic.fulcro.raw.application.current_state(app__$1);\nif(cljs.core.truth_(com.fulcrologic.fulcro.algorithms.denormalize.possibly_stale_QMARK_(state_map,prior_props))){\nvar query = com.fulcrologic.fulcro.raw.components.get_query.cljs$core$IFn$_invoke$arity$1(component);\nreturn com.fulcrologic.fulcro.algorithms.denormalize.traced_db__GT_tree(state_map,root_key,query);\n} else {\nreturn prior_props;\n}\n});\n/**\n * A helper for `add-root!` and similar. Populates the initial state for a subtree depending on `initialize?` and `keep-existing?`\n * \n * :keep-existing? - A boolean. If true, then the state will not be initialized if there\n * is already data at the `root-key`.\n *   \n */\ncom.fulcrologic.fulcro.raw.application.maybe_merge_new_root_BANG_ = (function com$fulcrologic$fulcro$raw$application$maybe_merge_new_root_BANG_(app__$1,root_key,component,p__62201){\nvar map__62202 = p__62201;\nvar map__62202__$1 = cljs.core.__destructure_map(map__62202);\nvar keep_existing_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62202__$1,new cljs.core.Keyword(null,\"keep-existing?\",\"keep-existing?\",-916245180));\nvar initial_params = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__62202__$1,new cljs.core.Keyword(null,\"initial-params\",\"initial-params\",1980851682),cljs.core.PersistentArrayMap.EMPTY);\nvar initialize_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62202__$1,new cljs.core.Keyword(null,\"initialize?\",\"initialize?\",-1238334118));\nif(cljs.core.truth_((function (){var and__4251__auto__ = initialize_QMARK_;\nif(cljs.core.truth_(and__4251__auto__)){\nreturn cljs.core.not((function (){var and__4251__auto____$1 = keep_existing_QMARK_;\nif(cljs.core.truth_(and__4251__auto____$1)){\nreturn cljs.core.contains_QMARK_(com.fulcrologic.fulcro.raw.application.current_state(app__$1),root_key);\n} else {\nreturn and__4251__auto____$1;\n}\n})());\n} else {\nreturn and__4251__auto__;\n}\n})())){\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app__$1),(function com$fulcrologic$fulcro$raw$application$maybe_merge_new_root_BANG__$_use_root_merge_STAR_(s){\nreturn com.fulcrologic.fulcro.algorithms.merge.merge_component.cljs$core$IFn$_invoke$arity$variadic(s,component,com.fulcrologic.fulcro.raw.components.get_initial_state.cljs$core$IFn$_invoke$arity$2(component,initial_params),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"replace\",\"replace\",-786587770),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [root_key], null)], 0));\n}));\n} else {\nreturn null;\n}\n});\n/**\n * Use a root key and component as a subtree managed by Fulcro. This establishes props updates to non-React UI,\n * and is not rendered by normal Fulcro rendering. You can integrate with React using `use-root` from the hooks ns.\n * \n * The `root-key` must be a unique (namespace recommended) key among all keys used within the application,\n * since the root of the database is where it will live.\n * \n * The `component` should be a real Fulcro component or a generated normalizing component from `nc` (or similar).\n * \n * The options map can contain:\n * \n * * `:initialize?` - Pass true if you want the initial state of component to be merged into app state.\n * * `:keep-existing?` - Only valid if `initialize?` is true. When true, indicates initialize should only\n *                       be done if there isn't already state at the component's ident in the database.\n * * `:initial-params` - The parameters to pass to the component's `get-initial-state` when initializing.\n * * `:receive-props` - REQUIRED: The function to call when the props change in the Fulcro state. This is a\n *                      `(fn [props] )` where the props will be the component props (sans the root-key).\n * \n * NOTE: This function tracks prior props and is capable of a very fast staleness check. It will not call your callback\n * unless it detects an actual change to the data of interest to your UI.\n *   \n */\ncom.fulcrologic.fulcro.raw.application.add_root_BANG_ = (function com$fulcrologic$fulcro$raw$application$add_root_BANG_(app__$1,root_key,component,p__62205){\nvar map__62206 = p__62205;\nvar map__62206__$1 = cljs.core.__destructure_map(map__62206);\nvar options = map__62206__$1;\nvar receive_props = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62206__$1,new cljs.core.Keyword(null,\"receive-props\",\"receive-props\",-391890642));\nvar initialize_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62206__$1,new cljs.core.Keyword(null,\"initialize?\",\"initialize?\",-1238334118));\nvar keep_existing_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62206__$1,new cljs.core.Keyword(null,\"keep-existing?\",\"keep-existing?\",-916245180));\nvar initial_params = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62206__$1,new cljs.core.Keyword(null,\"initial-params\",\"initial-params\",1980851682));\ncom.fulcrologic.fulcro.raw.application.maybe_merge_new_root_BANG_(app__$1,root_key,component,options);\n\nvar prior_props = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null);\nvar get_props = (function (){\nreturn com.fulcrologic.fulcro.raw.application.get_root_subtree_props(app__$1,root_key,component,cljs.core.deref(prior_props));\n});\nvar G__62207_62261 = get_props();\n(receive_props.cljs$core$IFn$_invoke$arity$1 ? receive_props.cljs$core$IFn$_invoke$arity$1(G__62207_62261) : receive_props.call(null,G__62207_62261));\n\nreturn com.fulcrologic.fulcro.raw.application.add_render_listener_BANG_(app__$1,root_key,(function com$fulcrologic$fulcro$raw$application$add_root_BANG__$_use_root_render_listener_STAR_(app__$2,_){\nvar props = get_props();\nif((props === cljs.core.deref(prior_props))){\nreturn null;\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"info\",\"info\",-317069002),\"com.fulcrologic.fulcro.raw.application\",null,430,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"props updated\",root_key], null);\n}),null)),null,1410182554,null);\n\ncljs.core.reset_BANG_(prior_props,props);\n\nreturn (receive_props.cljs$core$IFn$_invoke$arity$1 ? receive_props.cljs$core$IFn$_invoke$arity$1(props) : receive_props.call(null,props));\n}\n}));\n});\n/**\n * Remove a root key managed subtree from Fulcro. Does not garbage collect, just stops updating the callback.\n */\ncom.fulcrologic.fulcro.raw.application.remove_root_BANG_ = (function com$fulcrologic$fulcro$raw$application$remove_root_BANG_(app__$1,root_key){\nreturn com.fulcrologic.fulcro.raw.application.remove_render_listener_BANG_(app__$1,root_key);\n});\n/**\n * Helper for `add-component!` and similar. Populates the component state depending on `initialize?` and `keep-existing?`.\n * \n * `app` - The app\n * `component` - A component (e.g. from `nc`)\n * `component-data` - A tree of data that matches the shape of the component's query.\n * `initialize?` is true by default.\n * `:keep-existing?` - A boolean (default false). If true, then the state of the component will not be initialized if there\n * is already data at the component's ident (which will be computed using the initial entity provided).\n *   \n */\ncom.fulcrologic.fulcro.raw.application.maybe_merge_new_component_BANG_ = (function com$fulcrologic$fulcro$raw$application$maybe_merge_new_component_BANG_(app__$1,component,component_data,p__62211){\nvar map__62212 = p__62211;\nvar map__62212__$1 = cljs.core.__destructure_map(map__62212);\nvar keep_existing_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62212__$1,new cljs.core.Keyword(null,\"keep-existing?\",\"keep-existing?\",-916245180));\nvar initialize_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__62212__$1,new cljs.core.Keyword(null,\"initialize?\",\"initialize?\",-1238334118),true);\nif(cljs.core.truth_((function (){var and__4251__auto__ = initialize_QMARK_;\nif(cljs.core.truth_(and__4251__auto__)){\nreturn cljs.core.not((function (){var and__4251__auto____$1 = keep_existing_QMARK_;\nif(cljs.core.truth_(and__4251__auto____$1)){\nreturn com.fulcrologic.fulcro.raw.components.has_active_state_QMARK_(com.fulcrologic.fulcro.raw.application.current_state(app__$1),com.fulcrologic.fulcro.raw.components.get_ident.cljs$core$IFn$_invoke$arity$2(component,component_data));\n} else {\nreturn and__4251__auto____$1;\n}\n})());\n} else {\nreturn and__4251__auto__;\n}\n})())){\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app__$1),com.fulcrologic.fulcro.algorithms.merge.merge_component,component,component_data);\n} else {\nreturn null;\n}\n});\n/**\n * Use a component (that has initial state) as a subtree managed by Fulcro. This establishes props updates to non-React UI,\n * and is not rendered by normal Fulcro rendering.\n * \n * The `component` should be a real Fulcro component or a generated normalizing component from `nc` (or similar) that\n * has initial state. .\n * \n * The options map can contain:\n * \n * * `:initialize?` - Pass true if you want the initial state of component to be merged into app state.\n * * `:keep-existing?` - Only valid if `initialize?` is true. When true, indicates initialize should only\n *                       be done if there isn't already state at the component's ident in the database.\n * * `:initial-params` - The parameters to pass to the component's `get-initial-state` when initializing.\n * * `:receive-props` - REQUIRED: The function to call when the props change in the Fulcro state. This is a\n *                      `(fn [props] )` where the props will be the component props.\n *   \n */\ncom.fulcrologic.fulcro.raw.application.add_component_BANG_ = (function com$fulcrologic$fulcro$raw$application$add_component_BANG_(app__$1,component,p__62214){\nvar map__62215 = p__62214;\nvar map__62215__$1 = cljs.core.__destructure_map(map__62215);\nvar options = map__62215__$1;\nvar receive_props = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62215__$1,new cljs.core.Keyword(null,\"receive-props\",\"receive-props\",-391890642));\nvar initialize_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62215__$1,new cljs.core.Keyword(null,\"initialize?\",\"initialize?\",-1238334118));\nvar keep_existing_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62215__$1,new cljs.core.Keyword(null,\"keep-existing?\",\"keep-existing?\",-916245180));\nvar initial_params = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62215__$1,new cljs.core.Keyword(null,\"initial-params\",\"initial-params\",1980851682));\nvar initial_entity = com.fulcrologic.fulcro.raw.components.get_initial_state.cljs$core$IFn$_invoke$arity$2(component,initial_params);\nvar ident = (function (){var or__4253__auto__ = new cljs.core.Keyword(null,\"ident\",\"ident\",-742346).cljs$core$IFn$_invoke$arity$1(options);\nif(cljs.core.truth_(or__4253__auto__)){\nreturn or__4253__auto__;\n} else {\nreturn com.fulcrologic.fulcro.raw.components.get_ident.cljs$core$IFn$_invoke$arity$2(component,initial_entity);\n}\n})();\nvar prior_props = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null);\nvar get_props = (function (){\nreturn com.fulcrologic.fulcro.raw.components.get_traced_props(com.fulcrologic.fulcro.raw.application.current_state(app__$1),component,ident,cljs.core.deref(prior_props));\n});\ncom.fulcrologic.fulcro.raw.application.maybe_merge_new_component_BANG_(app__$1,component,initial_entity,options);\n\nvar G__62217_62263 = get_props();\n(receive_props.cljs$core$IFn$_invoke$arity$1 ? receive_props.cljs$core$IFn$_invoke$arity$1(G__62217_62263) : receive_props.call(null,G__62217_62263));\n\nreturn com.fulcrologic.fulcro.raw.application.add_render_listener_BANG_(app__$1,ident,(function (app__$2,_){\nvar props = get_props();\nif((cljs.core.deref(prior_props) === props)){\nreturn null;\n} else {\ncljs.core.reset_BANG_(prior_props,props);\n\nreturn (receive_props.cljs$core$IFn$_invoke$arity$1 ? receive_props.cljs$core$IFn$_invoke$arity$1(props) : receive_props.call(null,props));\n}\n}));\n});\n/**\n * Remove a root key managed subtree from Fulcro. Does not GC the state, just stops sending props updates on render.\n */\ncom.fulcrologic.fulcro.raw.application.remove_component_BANG_ = (function com$fulcrologic$fulcro$raw$application$remove_component_BANG_(app__$1,component){\nvar initial_entity = com.fulcrologic.fulcro.raw.components.get_initial_state.cljs$core$IFn$_invoke$arity$2(component,cljs.core.PersistentArrayMap.EMPTY);\nvar ident = com.fulcrologic.fulcro.raw.components.get_ident.cljs$core$IFn$_invoke$arity$2(component,initial_entity);\nreturn com.fulcrologic.fulcro.raw.application.remove_render_listener_BANG_(app__$1,ident);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","com/fulcrologic/fulcro/raw/application.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",43],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core.async","~$cljs.core.async","~$clojure.pprint","~$cljs.pprint"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$com.fulcrologic.fulcro.raw.application","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$ah","~$com.fulcrologic.fulcro.algorithms.lookup","~$edn-query-language.core","^P","~$goog.dom","^Q","~$com.fulcrologic.fulcro.algorithms.normalize","^R","~$log","~$taoensso.timbre","~$goog.functions","^U","~$comp","~$com.fulcrologic.fulcro.raw.components","~$eql","^P","~$com.fulcrologic.fulcro.algorithms.denormalize","^Y","~$mut","~$com.fulcrologic.fulcro.mutations","~$fnorm","^R","~$cljs.core","^11","~$gobj","~$goog.object","~$goog","^14","^13","^13","~$com.fulcrologic.fulcro.algorithms.tempid","^15","~$util","~$com.fulcrologic.fulcro.algorithms.do-not-use","~$com.fulcrologic.fulcro.algorithms.scheduling","^18","~$gdom","^Q","~$sched","^18","~$txn","~$com.fulcrologic.fulcro.algorithms.tx-processing","~$indexing","~$com.fulcrologic.fulcro.algorithms.indexing","~$df","~$com.fulcrologic.fulcro.data-fetch","^[","^[","^O","^O","^1@","^1@","~$merge","~$com.fulcrologic.fulcro.algorithms.merge","^1<","^1<","^T","^T","^W","^W","~$str","~$clojure.string","^1B","^1B","^1D","^1D","~$fdn","^Y","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing","^1F","~$stx","^1F","^1>","^1>","~$tempid","^15","^17","^17"],"~:seen",["^F",["~:require"]],"~:uses",["^ ","~$debounce","^U"],"~:require-macros",["^ ","^11","^11","^S","^T","^Z","^[","^[","^[","^T","^T","^1F","^1F","^1G","^1F"],"~:form",["~#list",["~$ns","^H",["^1O",["^1J",["^1D","~:as","^1C"],["^Y","^1Q","^1E"],["^17","^1Q","^16"],["^1>","^1Q","^1="],["^O","^1Q","^N"],["^1B","^1Q","^1A"],["^R","^1Q","^10"],["^18","^1Q","^1:"],["^15","^1Q","^1H"],["^1<","^1Q","^1;"],["^1F","^1Q","^1G"],["^1@","^1Q","^1?"],["^[","^1Q","^Z"],["^W","^1Q","^V"],["^P","^1Q","^X"],["^13","^1Q","^12"],["^U","~:refer",["^1L"]],["^Q","^1Q","^19"],["^T","^1Q","^S"]]]]],"~:flags",["^ ","^1J",["^F",[]]],"~:js-deps",["^ "],"~:deps",["^14","^11","^1D","^Y","^17","^1>","^O","^1B","^R","^18","^15","^1<","^1F","^1@","^[","^W","^P","^13","^U","^Q","^T"]],"^K","^H","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/fulcro/raw/application.cljc"],"~:compiled-at",1642814552375,"^I",["^ ","^N","^O","^P","^P","^Q","^Q","^R","^R","^S","^T","^U","^U","^V","^W","^X","^P","^Y","^Y","^Z","^[","^10","^R","^11","^11","^12","^13","^14","^14","^13","^13","^15","^15","^16","^17","^18","^18","^19","^Q","^1:","^18","^1;","^1<","^1=","^1>","^1?","^1@","^[","^[","^O","^O","^1@","^1@","^1A","^1B","^1<","^1<","^T","^T","^W","^W","^1C","^1D","^1B","^1B","^1D","^1D","^1E","^Y","^1F","^1F","^1G","^1F","^1>","^1>","^1H","^15","^17","^17"],"~:resource-name","com/fulcrologic/fulcro/raw/application.cljc","~:warnings",[],"~:source","(ns com.fulcrologic.fulcro.raw.application\n  (:require\n    [clojure.string :as str]\n    [com.fulcrologic.fulcro.algorithms.denormalize :as fdn]\n    [com.fulcrologic.fulcro.algorithms.do-not-use :as util]\n    [com.fulcrologic.fulcro.algorithms.indexing :as indexing]\n    [com.fulcrologic.fulcro.algorithms.lookup :as ah]\n    [com.fulcrologic.fulcro.algorithms.merge :as merge]\n    [com.fulcrologic.fulcro.algorithms.normalize :as fnorm]\n    [com.fulcrologic.fulcro.algorithms.scheduling :as sched]\n    [com.fulcrologic.fulcro.algorithms.tempid :as tempid]\n    [com.fulcrologic.fulcro.algorithms.tx-processing :as txn]\n    [com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing :as stx]\n    [com.fulcrologic.fulcro.data-fetch :as df]\n    [com.fulcrologic.fulcro.mutations :as mut]\n    [com.fulcrologic.fulcro.raw.components :as comp]\n    [edn-query-language.core :as eql]\n    #?@(:cljs [[goog.object :as gobj]\n               [goog.functions :refer [debounce]]\n               [goog.dom :as gdom]])\n    [taoensso.timbre :as log])\n  #?(:clj (:import (clojure.lang IDeref))))\n\n(defn basis-t\n  \"Return the current basis time of the app.\"\n  [app]\n  (-> app :com.fulcrologic.fulcro.application/runtime-atom deref :com.fulcrologic.fulcro.application/basis-t))\n\n(defn current-state\n  \"Get the current value of the application state database. If called without arguments it will attempt to find the app\n   in the dynamically-bound comp/*app*, which is bound during render.\"\n  [app-or-component]\n  (let [app (comp/any->app app-or-component)]\n    (-> app :com.fulcrologic.fulcro.application/state-atom deref)))\n\n(defn tick!\n  \"Move the basis-t forward one tick. For internal use in internal algorithms. Fulcro\n  uses this to add metadata to props so it can detect the newer of two version of props.\"\n  [app]\n  (swap! (:com.fulcrologic.fulcro.application/runtime-atom app) update :com.fulcrologic.fulcro.application/basis-t inc))\n\n(defn update-shared!\n  \"Force shared props to be recalculated. This updates the shared props on the app, and future renders will see the\n   updated values. This is a no-op if no shared-fn is defined on the app. If you're using React 16+ consider using\n   Context instead of shared.\"\n  [{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app}]\n  (try\n    (if-let [shared-fn (ah/app-algorithm app :shared-fn)]\n      (let [shared       (-> app :com.fulcrologic.fulcro.application/runtime-atom deref :com.fulcrologic.fulcro.application/static-shared-props)\n            state        (current-state app)\n            root-class   (-> app :com.fulcrologic.fulcro.application/runtime-atom deref :com.fulcrologic.fulcro.application/root-class)\n            query        (comp/get-query root-class state)\n            v            (fdn/db->tree query state state)\n            shared-props (merge shared (shared-fn v))]\n        (swap! runtime-atom assoc :com.fulcrologic.fulcro.application/shared-props shared-props))\n      (swap! runtime-atom assoc :com.fulcrologic.fulcro.application/shared-props\n        (-> app :com.fulcrologic.fulcro.application/runtime-atom deref :com.fulcrologic.fulcro.application/static-shared-props)))\n    (catch #?(:cljs :default :clj Throwable) e\n      (log/error e \"Cannot compute shared\"))))\n\n(defn root-props-changed?\n  \"Returns true if the props queries directly by the root component of the app (if mounted) have changed since the last\n  render.  This is a shallow analysis such that, for example, a join from root (in a normalized db) will be checked as a difference\n  of idents that the root prop points to.  This can be used for determining if things like shared-fn need to be re-run,\n  and if it would simply be quicker to keyframe render the entire tree.\n\n  This is a naiv√© algorithm that is essentially `select-keys` on the root props. It does not interpret the query in\n  any way.\"\n  [app]\n  (let [{:com.fulcrologic.fulcro.application/keys [runtime-atom state-atom]} app\n        {:com.fulcrologic.fulcro.application/keys [root-class indexes]} @runtime-atom]\n    (if-not (comp/get-query root-class @state-atom)\n      true\n      (let [state-map       @state-atom\n            prior-state-map (-> runtime-atom deref :com.fulcrologic.fulcro.application/last-rendered-state)\n            root-props      (:root-props indexes)\n            root-old        (select-keys prior-state-map root-props)\n            root-new        (select-keys state-map root-props)]\n        (not= root-old root-new)))))\n\n(defn render!\n  \"Render the application immediately.  Prefer `schedule-render!`, which will ensure no more than 60fps.\n\n  This is the central processing for render and cannot be overridden. `schedule-render!` will always invoke\n  this function.  The optimized render is called by this function, which does extra bookkeeping and\n  other supporting features common to all rendering.\n\n  Options include:\n  - `force-root?`: boolean.  When true disables all optimizations and forces a full root re-render.\n  - anything your selected rendering optization system allows.  Shared props are updated via `shared-fn`\n  only on `force-root?` and when (shallow) root props change.\n  \"\n  ([app]\n   (render! app {:force-root? false}))\n  ([app {:keys [force-root?] :as options}]\n   (tick! app)\n   (let [{:com.fulcrologic.fulcro.application/keys [runtime-atom state-atom]} app\n         {:com.fulcrologic.fulcro.application/keys [root-class]} (some-> runtime-atom deref)]\n     (when root-class\n       (let [core-render!        (ah/app-algorithm app :core-render!)\n             root-props-changed? (root-props-changed? app)]\n         (when (or force-root? root-props-changed?)\n           (update-shared! app))\n         (when core-render!\n           (core-render! app (merge options {:root-props-changed? root-props-changed?})))\n         (swap! runtime-atom assoc\n           :com.fulcrologic.fulcro.application/last-rendered-state @state-atom\n           :com.fulcrologic.fulcro.application/only-refresh #{}\n           :com.fulcrologic.fulcro.application/to-refresh #{})))\n     (let [batch-notifications (ah/app-algorithm app :batch-notifications)\n           notify-all!         #(doseq [render-listener (-> runtime-atom deref :com.fulcrologic.fulcro.application/render-listeners vals)]\n                                  (try\n                                    (render-listener app options)\n                                    (catch #?(:clj Exception :cljs :default) e\n                                      (log/error e \"Render listener failed. See https://book.fulcrologic.com/#err-render-listener-failed\"))))]\n       (if batch-notifications\n         (batch-notifications notify-all!)\n         (notify-all!))))))\n\n(let [go! #?(:cljs (debounce (fn [app options]\n                               (sched/schedule-animation! app :com.fulcrologic.fulcro.application/render-scheduled? #(render! app options))) 16)\n             :clj (fn [app options]\n                    (sched/schedule-animation! app :com.fulcrologic.fulcro.application/render-scheduled? #(render! app options))))]\n  (defn schedule-render!\n    \"Schedule a render on the next animation frame.\"\n    ([app]\n     (schedule-render! app {:force-root? false}))\n    ([app options]\n     (go! app options))))\n\n(defn default-remote-error?\n  \"Default detection of network errors. Returns true if the status-code of the given result\n  map is not 200.\"\n  [{:keys [status-code]}]\n  (not= 200 status-code))\n\n(defn default-global-eql-transform\n  \"The default query transform function.  It makes sure the following items on a component query\n  are never sent to the server:\n\n  - Props whose namespace is `ui`\n  - Any prop or join that is namespaced to com.fulcrologic.fulcro*\n  - Any ident (as a prop or join) whose table name is namespaced ui or com.fulcrologic.fulcro*\n\n  Takes an AST and returns the modified AST.\n  \"\n  [ast]\n  (let [kw-namespace (fn [k] (and (keyword? k) (namespace k)))]\n    (df/elide-ast-nodes ast (fn [k]\n                              (let [ns       (some-> k kw-namespace)\n                                    ident-ns (when (eql/ident? k) (some-> (first k) kw-namespace))]\n                                (or\n                                  (and\n                                    (string? ns)\n                                    (or\n                                      (= \"ui\" ns)\n                                      (str/starts-with? ns \"com.fulcrologic.fulcro.\")))\n                                  (and\n                                    (string? ident-ns)\n                                    (or\n                                      (= \"ui\" ident-ns)\n                                      (str/starts-with? ident-ns \"com.fulcrologic.fulcro.\")))))))))\n\n(defn initialize-state!\n  \"Initialize the app state using `root` component's app state. This will deep merge against any data that is already\n  in the state atom of the app. Can be called before `mount!`, in which case you should tell mount not to (re) initialize\n  state.\"\n  [app root]\n  (when #?(:clj true :cljs goog.DEBUG)\n    (comp/check-component-registry!))\n  (let [initial-db   (-> app :com.fulcrologic.fulcro.application/state-atom deref)\n        root-query   (comp/get-query root initial-db)\n        _            (util/dev-check-query root-query comp/component-name)\n        initial-tree (comp/get-initial-state root)\n        db-from-ui   (if root-query\n                       (-> (fnorm/tree->db root-query initial-tree true (merge/pre-merge-transform initial-tree))\n                         (merge/merge-alternate-union-elements root))\n                       initial-tree)\n        db           (util/deep-merge initial-db db-from-ui)]\n    (reset! (:com.fulcrologic.fulcro.application/state-atom app) db)))\n\n(def ^:deprecated default-tx! txn/default-tx!)\n\n(defn fulcro-app\n  \"Create a new Fulcro application. See com.fulcrologic.fulcro.application/fulcro-app for the React-based initializer.\n\n  This version creates an app that is not attached to React, and has no default root or optimized render. The\n  map of initial options is the same *except* that react-centric options are obviously ignore, and also:\n\n   * `:optimized-render!` - A `(fn ([app]) ([app txn-options]))` that can analyze the state of the application and optimally refresh the screen. Defaults to a no-op.\n     This function is normally called from core-render!, and therefore is useless unless you define a `core-render!` that calls it.\n   * `:core-render!` - A (fn [app txn-options] side-effect) that is called by schedule render. If you fail to supply this on a raw app, then\n     NO rendering will happen; however, render listeners will still be called.\n   * `:batch-notifications` - A side-effecting function `(fn [notify-all])` that can surround a batch of render notifiations with a context. The only\n     argument to this function is `notify-all`, which is a function that will do the actual notifications. This is useful when using render\n     notifications with React hooks, and need to tell React that a bunch of state changes need to happen together. The\n     normal setting for this (if you're using hooks and render listeners) is\n     `(fn [render!] (react-dom/unstable_batchedUpdates render!))` or\n     `(fn [render!] (react-native/unstable_batchedUpdates render!))`.\n\n  Note that raw apps are not mounted, but are instead ready to be used immediately.  If you want to use inspect, then\n  you must call `(inspect/client-started! app)` yourself.\n\n  Indexing is available, but normally runs from React lifecycle, so unless you're using this with React indexes will be non-managed.\n  \"\n  ([] (fulcro-app {}))\n  ([{:keys [props-middleware\n            global-eql-transform\n            global-error-action\n            default-result-action!\n            core-render!\n            optimized-render!\n            batch-notifications\n            render-root!\n            hydrate-root!\n            unmount-root!\n            submit-transaction!\n            abort-transaction!\n            render-middleware\n            initial-db\n            client-will-mount\n            client-did-mount\n            remote-error?\n            remotes\n            query-transform-default\n            load-marker-default\n            load-mutation\n            root-class\n            shared\n            external-config\n            shared-fn] :as options}]\n   (let [tx! (or submit-transaction! txn/default-tx!)]\n     {:com.fulcrologic.fulcro.application/id           (tempid/uuid)\n      :com.fulcrologic.fulcro.application/state-atom   (atom (or initial-db {}))\n      :com.fulcrologic.fulcro.application/config       {:load-marker-default     load-marker-default\n                                                        :client-did-mount        (or client-did-mount (:started-callback options))\n                                                        :client-will-mount       client-will-mount\n                                                        :external-config         external-config\n                                                        :query-transform-default query-transform-default\n                                                        :load-mutation           load-mutation}\n      :com.fulcrologic.fulcro.application/algorithms   {:com.fulcrologic.fulcro.algorithm/tx!                    tx!\n                                                        :com.fulcrologic.fulcro.algorithm/abort!                 (or abort-transaction! txn/abort!)\n                                                        :com.fulcrologic.fulcro.algorithm/batch-notifications    batch-notifications\n                                                        :com.fulcrologic.fulcro.algorithm/core-render!           (or core-render! identity)\n                                                        :com.fulcrologic.fulcro.algorithm/optimized-render!      (or optimized-render! identity)\n                                                        :com.fulcrologic.fulcro.algorithm/initialize-state!      initialize-state!\n                                                        :com.fulcrologic.fulcro.algorithm/shared-fn              shared-fn\n                                                        :com.fulcrologic.fulcro.algorithm/render-root!           render-root!\n                                                        :com.fulcrologic.fulcro.algorithm/hydrate-root!          hydrate-root!\n                                                        :com.fulcrologic.fulcro.algorithm/unmount-root!          unmount-root!\n                                                        :com.fulcrologic.fulcro.algorithm/render!                render!\n                                                        :com.fulcrologic.fulcro.algorithm/remote-error?          (or remote-error? default-remote-error?)\n                                                        :com.fulcrologic.fulcro.algorithm/global-error-action    global-error-action\n                                                        :com.fulcrologic.fulcro.algorithm/merge*                 merge/merge*\n                                                        :com.fulcrologic.fulcro.algorithm/default-result-action! (or default-result-action! mut/default-result-action!)\n                                                        :com.fulcrologic.fulcro.algorithm/global-eql-transform   (or global-eql-transform default-global-eql-transform)\n                                                        :com.fulcrologic.fulcro.algorithm/index-root!            indexing/index-root!\n                                                        :com.fulcrologic.fulcro.algorithm/index-component!       indexing/index-component!\n                                                        :com.fulcrologic.fulcro.algorithm/drop-component!        indexing/drop-component!\n                                                        :com.fulcrologic.fulcro.algorithm/props-middleware       props-middleware\n                                                        :com.fulcrologic.fulcro.algorithm/render-middleware      render-middleware\n                                                        :com.fulcrologic.fulcro.algorithm/schedule-render!       schedule-render!}\n      :com.fulcrologic.fulcro.application/runtime-atom (atom\n                                                         {:com.fulcrologic.fulcro.application/app-root            nil\n                                                          :com.fulcrologic.fulcro.application/mount-node          nil\n                                                          :com.fulcrologic.fulcro.application/root-class          root-class\n                                                          :com.fulcrologic.fulcro.application/root-factory        nil\n                                                          :com.fulcrologic.fulcro.application/basis-t             1\n                                                          :com.fulcrologic.fulcro.application/last-rendered-state {}\n\n                                                          :com.fulcrologic.fulcro.application/static-shared-props shared\n                                                          :com.fulcrologic.fulcro.application/shared-props        {}\n\n                                                          :com.fulcrologic.fulcro.application/remotes             (or remotes\n                                                                                                                    {:remote {:transmit! (fn [{::txn/keys [result-handler]}]\n                                                                                                                                           (log/fatal \"Remote requested, but no remote defined.\")\n                                                                                                                                           (result-handler {:status-code 418 :body {}}))}})\n                                                          :com.fulcrologic.fulcro.application/indexes             {:ident->components {}}\n                                                          :com.fulcrologic.fulcro.application/mutate              mut/mutate\n                                                          :com.fulcrologic.fulcro.application/render-listeners    (cond-> {}\n                                                                                                                    (= tx! txn/default-tx!) (assoc ::txn/after-render txn/application-rendered!))\n                                                          ::txn/activation-scheduled?                             false\n                                                          ::txn/queue-processing-scheduled?                       false\n                                                          ::txn/sends-scheduled?                                  false\n                                                          ::txn/submission-queue                                  []\n                                                          ::txn/active-queue                                      []\n                                                          ::txn/send-queues                                       {}})})))\n\n(defn fulcro-app?\n  \"Returns true if the given `x` is a Fulcro application.\"\n  [x]\n  (boolean\n    (and (map? x) (contains? x :com.fulcrologic.fulcro.application/state-atom) (contains? x :com.fulcrologic.fulcro.application/runtime-atom))))\n\n(defn abort!\n  \"Attempt to abort the send queue entries with the given abort ID.\n\n  NOTE: This can be redefined on an application. If you change your transaction processing routing, then the built-in\n  version will not work, and this docstring does not apply.\n\n  Will notify any aborted operations (e.g. result-handler\n  will be invoked, remote-error? will be used to decide if you consider that an error, etc.).\n  The result map from an abort will include `{::txn/aborted? true}`, but will not include `:status-code` or `:body`.\n\n  This function affects both started and non-started items in the send queues, but will not affect submissions that have not yet\n  made it to the network processing layer (things still in top-level transaction submission queue).\n\n  So the sequence of calls:\n\n  ```\n  (comp/transact! this `[(f)] {:abort-id :a})\n  (app/abort! this :a)\n  ```\n\n  will cancel anything active with abort id `:a`, but since you've held the thread the entire time the submission of\n  mutation `(f)` is still on the submission queue and will not be aborted.\n\n  - `app-ish`: Anything that can be coerced to an app with comp/any->app.\n  - `abort-id`: The abort ID of the operations to be aborted.\n  \"\n  [app-ish abort-id]\n  (let [app (comp/any->app app-ish)]\n    (when-let [abort! (ah/app-algorithm app :abort!)]\n      (abort! app abort-id))))\n\n(defn add-render-listener!\n  \"Add (or replace) a render listener named `nm`. `listener` is a `(fn [app options] )` that will be called\n   after each render.\n\n   See the `:batch-notifications` option of the application, which can be set when using certain verions of React to\n   improve performance and reduce over-rendering.\"\n  [app nm listener]\n  (swap! (:com.fulcrologic.fulcro.application/runtime-atom app) assoc-in [:com.fulcrologic.fulcro.application/render-listeners nm] listener))\n\n(defn remove-render-listener!\n  \"Remove the render listener named `nm`.\"\n  [app nm]\n  (swap! (:com.fulcrologic.fulcro.application/runtime-atom app) update :com.fulcrologic.fulcro.application/render-listeners dissoc nm))\n\n(defn headless-synchronous-app\n  \"Returns a new instance from `fulcro-app` that is pre-configured to use synchronous transaction processing\n   and no rendering. This is particularly useful when you want to write integration tests around a Fulcro\n   app so that the tests need no async support. The `faux-root` must be a component (which need have no body).\n\n   The returned application will be properly initialized, and will have the initial state declared in `faux-component`\n   already merged into the app's state (i.e. the returned app is ready for operations).\n\n   `options` can be anything from `fulcro-app`, but :submit-transaction!, :render-root!, and\n   :optimized-render! are ignored.\"\n  ([faux-root]\n   (headless-synchronous-app faux-root {}))\n  ([faux-root options]\n   (let [app (stx/with-synchronous-transactions\n               (fulcro-app (merge options\n                             {:render-root!      (constantly true)\n                              :optimized-render! (constantly true)})))]\n     (initialize-state! app faux-root)\n     app)))\n\n(defn set-remote!\n  \"Add/replace a remote on the given app. `remote-name` is a keyword, and `remote` is a Fulcro remote (map containing\n  at least `transmit!`).\n\n  This function is *generally* safe to call at any time. Requests that are in-flight on an old version of the remote will complete\n  on that remote, and any that are queued will be processed by the new one; however, if the old remote supported abort\n  operations then an abort on in-flight requests of the old remote will not work (since you're replaced the remote that the details\n  about that request).\n\n  This function changes the content of the application's runtime atom so you do not need to capture the return value, which\n  is the app you passed in.\"\n  [app remote-name remote]\n  (swap! (:com.fulcrologic.fulcro.application/runtime-atom app) assoc-in [:com.fulcrologic.fulcro.application/remotes remote-name] remote)\n  app)\n\n(defn get-root-subtree-props\n  \"Uses `fdn/traced-db->tree` to get the props of the subtree at `root-key`. If `prior-props` are not stale, those are\n   returned instead.\"\n  [app root-key component prior-props]\n  (let [state-map (current-state app)]\n    (if (fdn/possibly-stale? state-map prior-props)\n      (let [query (comp/get-query component)]\n        (fdn/traced-db->tree state-map root-key query))\n      prior-props)))\n\n(defn maybe-merge-new-root!\n  \"A helper for `add-root!` and similar. Populates the initial state for a subtree depending on `initialize?` and `keep-existing?`\n\n   :keep-existing? - A boolean. If true, then the state will not be initialized if there\n   is already data at the `root-key`.\n  \"\n  [app root-key component {:keys [keep-existing? initial-params initialize?]\n                           :or   {initial-params {}}}]\n  (when (and initialize?\n          (not (and keep-existing? (contains? (current-state app) root-key))))\n    (swap! (:com.fulcrologic.fulcro.application/state-atom app)\n      (fn use-root-merge* [s]\n        (merge/merge-component s component\n          (comp/get-initial-state component initial-params)\n          :replace [root-key])))))\n\n(defn add-root!\n  \"Use a root key and component as a subtree managed by Fulcro. This establishes props updates to non-React UI,\n   and is not rendered by normal Fulcro rendering. You can integrate with React using `use-root` from the hooks ns.\n\n   The `root-key` must be a unique (namespace recommended) key among all keys used within the application,\n   since the root of the database is where it will live.\n\n   The `component` should be a real Fulcro component or a generated normalizing component from `nc` (or similar).\n\n   The options map can contain:\n\n   * `:initialize?` - Pass true if you want the initial state of component to be merged into app state.\n   * `:keep-existing?` - Only valid if `initialize?` is true. When true, indicates initialize should only\n                         be done if there isn't already state at the component's ident in the database.\n   * `:initial-params` - The parameters to pass to the component's `get-initial-state` when initializing.\n   * `:receive-props` - REQUIRED: The function to call when the props change in the Fulcro state. This is a\n                        `(fn [props] )` where the props will be the component props (sans the root-key).\n\n   NOTE: This function tracks prior props and is capable of a very fast staleness check. It will not call your callback\n   unless it detects an actual change to the data of interest to your UI.\n  \"\n  [app root-key component {:keys [receive-props initialize? keep-existing? initial-params] :as options}]\n  (maybe-merge-new-root! app root-key component options)\n  (let [prior-props (atom nil)\n        get-props   #(get-root-subtree-props app root-key component @prior-props)]\n    (receive-props (get-props))\n    (add-render-listener! app root-key (fn use-root-render-listener* [app _]\n                                         (let [props (get-props)]\n                                           (when-not (identical? props @prior-props)\n                                             (log/info \"props updated\" root-key)\n                                             (reset! prior-props props)\n                                             (receive-props props)))))))\n\n(defn remove-root!\n  \"Remove a root key managed subtree from Fulcro. Does not garbage collect, just stops updating the callback.\"\n  [app root-key]\n  (remove-render-listener! app root-key))\n\n(defn maybe-merge-new-component!\n  \"Helper for `add-component!` and similar. Populates the component state depending on `initialize?` and `keep-existing?`.\n\n   `app` - The app\n   `component` - A component (e.g. from `nc`)\n   `component-data` - A tree of data that matches the shape of the component's query.\n   `initialize?` is true by default.\n   `:keep-existing?` - A boolean (default false). If true, then the state of the component will not be initialized if there\n   is already data at the component's ident (which will be computed using the initial entity provided).\n  \"\n  [app component component-data {:keys [keep-existing? initialize?]\n                                 :or   {initialize? true}}]\n  (when (and initialize?\n          (not (and keep-existing?\n                 (comp/has-active-state? (current-state app) (comp/get-ident component component-data)))))\n    (swap! (:com.fulcrologic.fulcro.application/state-atom app) merge/merge-component component component-data)))\n\n(defn add-component!\n  \"Use a component (that has initial state) as a subtree managed by Fulcro. This establishes props updates to non-React UI,\n   and is not rendered by normal Fulcro rendering.\n\n   The `component` should be a real Fulcro component or a generated normalizing component from `nc` (or similar) that\n   has initial state. .\n\n   The options map can contain:\n\n   * `:initialize?` - Pass true if you want the initial state of component to be merged into app state.\n   * `:keep-existing?` - Only valid if `initialize?` is true. When true, indicates initialize should only\n                         be done if there isn't already state at the component's ident in the database.\n   * `:initial-params` - The parameters to pass to the component's `get-initial-state` when initializing.\n   * `:receive-props` - REQUIRED: The function to call when the props change in the Fulcro state. This is a\n                        `(fn [props] )` where the props will be the component props.\n  \"\n  [app component {:keys [receive-props initialize? keep-existing? initial-params] :as options}]\n  (let [initial-entity (comp/get-initial-state component initial-params)\n        ident          (or (:ident options) (comp/get-ident component initial-entity))\n        prior-props    (atom nil)\n        get-props      #(comp/get-traced-props (current-state app) component ident @prior-props)]\n    (maybe-merge-new-component! app component initial-entity options)\n    (receive-props (get-props))\n    (add-render-listener! app ident (fn [app _]\n                                      (let [props (get-props)]\n                                        (when-not (identical? @prior-props props)\n                                          (reset! prior-props props)\n                                          (receive-props props)))))))\n\n(defn remove-component!\n  \"Remove a root key managed subtree from Fulcro. Does not GC the state, just stops sending props updates on render.\"\n  [app component]\n  (let [initial-entity (comp/get-initial-state component {})\n        ident          (comp/get-ident component initial-entity)]\n    (remove-render-listener! app ident)))\n","~:reader-features",["^F",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["com.fulcrologic.fulcro.raw.application/basis-t","app","cljs.core/deref","com.fulcrologic.fulcro.raw.application/current-state","app-or-component","com.fulcrologic.fulcro.raw.components/any->app","com.fulcrologic.fulcro.raw.application/tick!","cljs.core.swap_BANG_","cljs.core/update","cljs.core/inc","p__62035","map__62036","cljs.core/--destructure-map","cljs.core.get","com.fulcrologic.fulcro.raw.application/update-shared!","runtime-atom","e62037","temp__5751__auto__","shared-fn","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","shared","state","root-class","query","com.fulcrologic.fulcro.raw.components.get_query","v","com.fulcrologic.fulcro.algorithms.denormalize/db->tree","shared-props","cljs.core.merge","cljs.core/assoc","e","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","com.fulcrologic.fulcro.raw.application/root-props-changed?","map__62091","map__62092","state-atom","indexes","cljs.core/not","state-map","prior-state-map","root-props","root-old","cljs.core/select-keys","root-new","cljs.core.not_EQ_","var_args","G__62136","com.fulcrologic.fulcro.raw.application/render!","js/Error","p__62145","map__62146","com.fulcrologic.fulcro.raw.application.render_BANG_","force-root?","options","map__62147","map__62148","G__62149","core-render!","root-props-changed?","or__4253__auto__","G__62152","G__62153","batch-notifications","notify-all!","seq__62155","cljs.core/seq","chunk__62156","count__62157","i__62158","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","render-listener","cljs.core/vals","e62162","e62163","go!","goog.functions/debounce","com.fulcrologic.fulcro.algorithms.scheduling/schedule-animation!","G__62167","com.fulcrologic.fulcro.raw.application/schedule-render!","com.fulcrologic.fulcro.raw.application.schedule_render_BANG_","p__62169","map__62170","com.fulcrologic.fulcro.raw.application/default-remote-error?","status-code","com.fulcrologic.fulcro.raw.application/default-global-eql-transform","ast","kw-namespace","k","and__4251__auto__","cljs.core/Keyword","cljs.core/namespace","com.fulcrologic.fulcro.data-fetch/elide-ast-nodes","ns","G__62172","ident-ns","edn-query-language.core/ident?","G__62174","cljs.core._EQ_","clojure.string/starts-with?","com.fulcrologic.fulcro.raw.application/initialize-state!","root","js/goog.DEBUG","com.fulcrologic.fulcro.raw.components/check-component-registry!","initial-db","root-query","_","com.fulcrologic.fulcro.algorithms.do-not-use/dev-check-query","com.fulcrologic.fulcro.raw.components/component-name","initial-tree","com.fulcrologic.fulcro.raw.components.get_initial_state","db-from-ui","com.fulcrologic.fulcro.algorithms.normalize.tree__GT_db","com.fulcrologic.fulcro.algorithms.merge.pre_merge_transform","com.fulcrologic.fulcro.algorithms.merge/merge-alternate-union-elements","db","com.fulcrologic.fulcro.algorithms.do_not_use.deep_merge","cljs.core/reset!","com.fulcrologic.fulcro.raw.application/default-tx!","com.fulcrologic.fulcro.algorithms.tx-processing/default-tx!","G__62180","com.fulcrologic.fulcro.raw.application/fulcro-app","p__62182","map__62183","com.fulcrologic.fulcro.raw.application.fulcro_app","props-middleware","global-eql-transform","global-error-action","default-result-action!","optimized-render!","render-root!","hydrate-root!","unmount-root!","submit-transaction!","abort-transaction!","render-middleware","client-will-mount","client-did-mount","remote-error?","remotes","query-transform-default","load-marker-default","load-mutation","external-config","tx!","com.fulcrologic.fulcro.algorithms.tempid.uuid","cljs.core.atom","com.fulcrologic.fulcro.algorithms.tx-processing/abort!","cljs.core/identity","com.fulcrologic.fulcro.algorithms.merge/merge*","com.fulcrologic.fulcro.mutations/default-result-action!","com.fulcrologic.fulcro.algorithms.indexing/index-root!","com.fulcrologic.fulcro.algorithms.indexing/index-component!","com.fulcrologic.fulcro.algorithms.indexing/drop-component!","p__62189","map__62190","result-handler","G__62191","com.fulcrologic.fulcro.mutations/mutate","G__62187","cljs.core.assoc","com.fulcrologic.fulcro.algorithms.tx-processing/application-rendered!","com.fulcrologic.fulcro.raw.application/fulcro-app?","x","cljs.core/boolean","cljs.core/map?","cljs.core/contains?","com.fulcrologic.fulcro.raw.application/abort!","app-ish","abort-id","abort!","com.fulcrologic.fulcro.raw.application/add-render-listener!","nm","listener","cljs.core/assoc-in","com.fulcrologic.fulcro.raw.application/remove-render-listener!","cljs.core/dissoc","G__62197","com.fulcrologic.fulcro.raw.application/headless-synchronous-app","faux-root","com.fulcrologic.fulcro.raw.application.headless_synchronous_app","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/with-synchronous-transactions","cljs.core/constantly","com.fulcrologic.fulcro.raw.application/set-remote!","remote-name","remote","com.fulcrologic.fulcro.raw.application/get-root-subtree-props","root-key","component","prior-props","com.fulcrologic.fulcro.algorithms.denormalize/possibly-stale?","com.fulcrologic.fulcro.algorithms.denormalize/traced-db->tree","p__62201","map__62202","com.fulcrologic.fulcro.raw.application/maybe-merge-new-root!","keep-existing?","initial-params","initialize?","s","com.fulcrologic.fulcro.algorithms.merge.merge_component","p__62205","map__62206","com.fulcrologic.fulcro.raw.application/add-root!","receive-props","get-props","G__62207","props","com.fulcrologic.fulcro.raw.application/remove-root!","p__62211","map__62212","com.fulcrologic.fulcro.raw.application/maybe-merge-new-component!","component-data","com.fulcrologic.fulcro.raw.components/has-active-state?","com.fulcrologic.fulcro.raw.components.get_ident","com.fulcrologic.fulcro.algorithms.merge/merge-component","p__62214","map__62215","com.fulcrologic.fulcro.raw.application/add-component!","initial-entity","ident","com.fulcrologic.fulcro.raw.components/get-traced-props","G__62217","com.fulcrologic.fulcro.raw.application/remove-component!"]],"~:used-vars",["^F",["~$cljs.core/--destructure-map","~$com.fulcrologic.fulcro.algorithms.do-not-use/dev-check-query","~$com.fulcrologic.fulcro.algorithms.indexing/index-component!","~$clojure.string/starts-with?","~$com.fulcrologic.fulcro.mutations/default-result-action!","~$com.fulcrologic.fulcro.raw.components/check-component-registry!","~$com.fulcrologic.fulcro.raw.components/has-active-state?","~$com.fulcrologic.fulcro.algorithms.merge/merge-component","~$com.fulcrologic.fulcro.raw.components/get-ident","~$cljs.core/=","~$taoensso.timbre/-log!","~$com.fulcrologic.fulcro.algorithms.merge/merge-alternate-union-elements","~$com.fulcrologic.fulcro.mutations/mutate","~$edn-query-language.core/ident?","~$cljs.core/count","~$cljs.core/deref","~$com.fulcrologic.fulcro.algorithms.scheduling/schedule-animation!","~$cljs.core/seq","~$cljs.core/chunk-first","~$com.fulcrologic.fulcro.raw.components/get-traced-props","~$cljs.core/identity","~$cljs.core/Keyword","~$com.fulcrologic.fulcro.raw.application/fulcro-app?","~$com.fulcrologic.fulcro.data-fetch/elide-ast-nodes","~$com.fulcrologic.fulcro.raw.application/maybe-merge-new-root!","~$com.fulcrologic.fulcro.raw.application/add-component!","~$com.fulcrologic.fulcro.algorithms.tx-processing/application-rendered!","~$com.fulcrologic.fulcro.raw.application/default-global-eql-transform","~$cljs.core/not=","~$cljs.core/dissoc","~$cljs.core/Delay","~$cljs.core/chunk-rest","~$cljs.core/atom","~$com.fulcrologic.fulcro.raw.application/current-state","~$com.fulcrologic.fulcro.raw.application/add-render-listener!","~$com.fulcrologic.fulcro.raw.components/any->app","~$com.fulcrologic.fulcro.raw.application/initialize-state!","~$com.fulcrologic.fulcro.raw.application/render!","~$cljs.core/contains?","~$cljs.core/map?","~$cljs.core/reset!","~$com.fulcrologic.fulcro.raw.application/remove-component!","~$com.fulcrologic.fulcro.algorithms.tempid/uuid","~$taoensso.timbre/*config*","~$cljs.core/update","~$cljs.core/namespace","~$cljs.core/vals","~$cljs.core/swap!","~$com.fulcrologic.fulcro.raw.application/get-root-subtree-props","~$cljs.core/get","~$cljs.core/constantly","~$cljs.core/-nth","~$com.fulcrologic.fulcro.raw.application/maybe-merge-new-component!","~$com.fulcrologic.fulcro.raw.application/fulcro-app","~$com.fulcrologic.fulcro.raw.components/component-name","~$com.fulcrologic.fulcro.algorithms.merge/pre-merge-transform","~$com.fulcrologic.fulcro.raw.application/basis-t","~$com.fulcrologic.fulcro.algorithms.normalize/tree->db","~$com.fulcrologic.fulcro.raw.application/headless-synchronous-app","~$com.fulcrologic.fulcro.raw.application/add-root!","~$com.fulcrologic.fulcro.algorithms.denormalize/db->tree","~$com.fulcrologic.fulcro.algorithms.tx-processing/default-tx!","~$com.fulcrologic.fulcro.raw.application/tick!","~$com.fulcrologic.fulcro.algorithms.do-not-use/deep-merge","~$js/goog.DEBUG","~$cljs.core/next","~$cljs.core/select-keys","~$com.fulcrologic.fulcro.raw.components/get-initial-state","~$com.fulcrologic.fulcro.raw.application/update-shared!","~$com.fulcrologic.fulcro.raw.application/default-remote-error?","~$cljs.core/not","~$com.fulcrologic.fulcro.algorithms.indexing/drop-component!","~$com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","~$com.fulcrologic.fulcro.raw.application/abort!","~$cljs.core/assoc","~$cljs.core/assoc-in","~$com.fulcrologic.fulcro.raw.application/set-remote!","~$com.fulcrologic.fulcro.raw.application/schedule-render!","~$com.fulcrologic.fulcro.raw.application/root-props-changed?","~$com.fulcrologic.fulcro.algorithms.tx-processing/abort!","~$com.fulcrologic.fulcro.raw.application/default-tx!","~$com.fulcrologic.fulcro.algorithms.merge/merge*","~$com.fulcrologic.fulcro.algorithms.indexing/index-root!","~$com.fulcrologic.fulcro.algorithms.denormalize/traced-db->tree","~$goog.functions/debounce","~$cljs.core/first","~$com.fulcrologic.fulcro.raw.application/remove-root!","~$com.fulcrologic.fulcro.algorithms.denormalize/possibly-stale?","~$cljs.core/merge","~$com.fulcrologic.fulcro.raw.components/get-query","~$js/Error","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/with-synchronous-transactions","~$cljs.core/boolean","~$cljs.core/inc","~$cljs.core/chunked-seq?","~$com.fulcrologic.fulcro.raw.application/remove-render-listener!"]]],"~:cache-keys",["~#cmap",[["^1W","com/fulcrologic/fulcro/algorithms/normalize.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^F",[]],"~:deps-syms",["^14","^11","^17","^P","^T","~$com.fulcrologic.fulcro.components"]]],["^1W","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","~$goog.dom.HtmlElement"]]],["^1W","goog/async/freelist.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["^1W","cljs/core/async/impl/ioc_helpers.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","~$cljs.core.async.impl.protocols"]]],["^1W","goog/i18n/datetimesymbols.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["^1W","goog/labs/useragent/platform.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","~$goog.string.internal","~$goog.labs.userAgent.util"]]],["^1W","expound/util.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11"]]],["^1W","goog/crypt/crypt.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","~$goog.asserts"]]],["^1W","cljs/core/async.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^4G","~$cljs.core.async.impl.channels","~$cljs.core.async.impl.buffers","~$cljs.core.async.impl.timers","~$cljs.core.async.impl.dispatch","~$cljs.core.async.impl.ioc-helpers","~$goog.array"]]],["^1W","goog/timer/timer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","~$goog.Promise","~$goog.events.EventTarget","~$goog.Thenable"]]],["^1W","com/fulcrologic/fulcro/algorithms/lookup.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^T"]]],["^1W","cljs/spec/gen/alpha.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","~$goog.Uri"]]],["^1W","com/fulcrologic/fulcro/algorithms/indexing.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^W","^17","^Y","^[","~$com.fulcrologic.guardrails.core","~$clojure.set","^P","~$taoensso.encore","^T"]]],["^1W","cljs/tools/reader/impl/utils.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^1D","~$goog.string"]]],["^1W","goog/math/math.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^4J"]]],["^1W","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["^1W","goog/string/stringformat.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^4X"]]],["^1W","goog/events/eventtype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1W","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^4P","^13","^4I","^4H"]]],["^1W","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^4J","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^4H"]]],["^1W","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^4J"]]],["^1W","com/fulcrologic/fulcro/algorithms/do_not_use.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^T","^1D","^P","^13","~$goog.crypt","~$goog.crypt.base64","^?"]]],["^1W","expound/problems.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","~$expound.paths","^?"]]],["^1W","goog/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^4I","~$goog.reflect","^4H"]]],["^1W","goog/structs/prioritypool.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^1W","goog/events/eventlike.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","~$goog.events.Event","~$goog.events.EventId"]]],["^1W","goog/async/run.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^1W","com/cognitect/transit/impl/reader.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","~$com.cognitect.transit.impl.decoder","~$com.cognitect.transit.caching"]]],["^1W","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["^1W","goog/async/workqueue.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","~$goog.async.FreeList","^4J"]]],["^1W","com/fulcrologic/fulcro/dom/events.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11"]]],["^1W","goog/events/events.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^4J","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^4Y","~$goog.events.Listenable","~$goog.events.ListenerMap","~$goog.debug.ErrorHandler","^5?","~$goog.events.EventLike","~$goog.events.EventWrapper","~$goog.events.ListenableKey","~$goog.events.Listener"]]],["^1W","goog/promise/resolver.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^4Q"]]],["^1W","goog/events/browserfeature.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["^1W","cljs/tools/reader/edn.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^4X","~$goog.string.StringBuffer"]]],["^1W","goog/structs/priorityqueue.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","~$goog.structs.Heap"]]],["^1W","goog/net/xhrio.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","~$goog.Timer","^4P","^4J","~$goog.collections.maps","^5F","^4R","~$goog.json.hybrid","~$goog.log","~$goog.net.ErrorCode","~$goog.net.EventType","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^13","^4X","~$goog.uri.utils","^4Z","^4T","^5J","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^1W","goog/promise/thenable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^4Q"]]],["^1W","goog/collections/iters.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["^1W","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^4V","^1<","^18","^O","^[","^4E","~$com.fulcrologic.fulcro.inspect.inspect-client","^P","^T"]]],["^1W","com/fulcrologic/fulcro/algorithms/transit.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","~$cognitect.transit","^4U","^?","^15"]]],["^1W","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["^1W","com/fulcrologic/guardrails/utils.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","~$clojure.walk"]]],["^1W","cljs/tools/reader/impl/inspect.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11"]]],["^1W","com/cognitect/transit/util.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^13"]]],["^1W","cljs/pprint.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^1D","^4X","^5T"]]],["^1W","com/fulcrologic/fulcro/algorithms/data_targeting.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^4V","^?","^4U","^P","^T"]]],["^1W","cljs/tools/reader.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^5P","^5Q","^5R","^5O","^4P","^4X","^5T"]]],["^1W","expound/alpha.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","~$expound.problems","^?","^1D","^4V","~$expound.printer","~$expound.util","~$expound.ansi"]]],["^1W","taoensso/timbre.cljc"],["ed86c0ab3cf1c4771c5f9bf201405e20c3027ced","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^1D","~$goog.i18n.DateTimeFormat","^4W","~$taoensso.timbre.appenders.core"]]],["^1W","goog/net/wrapperxmlhttpfactory.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^63","^64"]]],["^1W","goog/date/utcdatetime.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","~$goog.date","~$goog.date.Date","~$goog.date.DateTime","~$goog.date.Interval"]]],["^1W","goog/i18n/nativelocaledigits.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["^1W","goog/events/eventtarget.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","~$goog.Disposable","^4J","~$goog.events","^5>","^5H","^5I","^13","^5?","^5K","^5M"]]],["^1W","com/fulcrologic/guardrails/core.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","~$com.fulcrologic.guardrails.impl.externs","~$com.fulcrologic.guardrails.utils","^A","^?","^1D","~$expound.alpha"]]],["^1W","goog/disposable/disposable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","~$goog.disposable.IDisposable","~$goog.dispose","~$goog.disposeAll"]]],["^1W","expound/ansi.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^1D"]]],["^1W","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["~:shadow.build.npm/resource","node_modules/react/index.js"],["1c6e82d3f9756822c3b08dd8f8e1d7c23a7f1630","3679a1a898d0c80b330819274df3fe1302fa19d1","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["~$shadow.js","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1W","shadow/js.js"],["ace9930933839911cdec109414077e6c17edf429","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["^1W","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["^1W","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^4J"]]],["^1W","taoensso/encore.cljc"],["8ce32d99c08a853f8a56322b5aab80e59c3bd4d6","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^1D","^4V","~$cljs.reader","~$cljs.tools.reader.edn","^13","^4P","^4X","~$goog.string.format","^5T","^6C","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","^5[","^5Z","~$taoensso.truss"]]],["^1W","goog/structs/set.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","~$goog.structs","~$goog.structs.Collection","~$goog.structs.Map","~$goog.iter.Iterator"]]],"~:SHADOW-TIMESTAMP",[1642814470000,1642814470000,1642814470000],["^6J","node_modules/react/cjs/react.development.js"],["1c6e82d3f9756822c3b08dd8f8e1d7c23a7f1630","3679a1a898d0c80b330819274df3fe1302fa19d1","754b7a48941975257c8955f6d5e511cb3a878737","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^6K","~$module$node_modules$object_assign$index"]]],["^1W","taoensso/timbre/appenders/core.cljc"],["ed86c0ab3cf1c4771c5f9bf201405e20c3027ced","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^1D","^4W"]]],["^1W","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^4J","^5;"]]],["^1W","goog/events/listener.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^5M","^5H"]]],["^1W","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^4J","~$goog.fs.blob","^4[","~$goog.html.SafeScript","~$goog.html.trustedtypes","^51","^52","^53","^54"]]],["^1W","cljs/core/async/impl/channels.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^4G","^4N","^4L"]]],["^1W","goog/events/listenermap.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^4P","^5N","^13","^5?","^5H","^5M"]]],["^1W","goog/events/eventid.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["^1W","taoensso/truss.cljs"],["02c08dae83153a50eb946c4d742f574a24bb2a76","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","~$taoensso.truss.impl"]]],["^1W","com/fulcrologic/guardrails/registry.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11"]]],["^1W","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["^1W","goog/events/eventwrapper.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","~$goog.events.EventHandler","~$goog.events.ListenableType"]]],["^1W","com/fulcrologic/fulcro/algorithms/merge.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","~$com.fulcrologic.fulcro.algorithms.data-targeting","^4E","^O","^R","^Y","^17","^P","^T","^15"]]],["^1W","edn_query_language/core.cljc"],["839028d06d9cc88b18b20c77c53a2bb77140d1f7","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^?"]]],["^1W","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["^1W","cljs/core/async/impl/dispatch.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^4L","^5A"]]],["^1W","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^53","~$goog.html.SafeUrl","^54","^4J","^4H"]]],["^1W","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^4J","~$goog.dom.asserts","^U","~$goog.html.SafeHtml","^70","~$goog.html.SafeStyle","^76","^50","~$goog.html.uncheckedconversions","^53","^4H"]]],["^1W","expound/paths.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^?","^6:"]]],["^1W","taoensso/truss/impl.cljs"],["02c08dae83153a50eb946c4d742f574a24bb2a76","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^4V"]]],["^1W","clojure/walk.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11"]]],["^1W","goog/useragent/product.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^58","^5:","^4Z"]]],["^1W","cljs/core/async/impl/protocols.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11"]]],["^1W","goog/net/eventtype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["^1W","goog/structs/map.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","~$goog.collections.iters","^6X","~$goog.iter.StopIteration","~$goog.iter.es6"]]],["^1W","goog/net/xhriopool.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^6Q","~$goog.structs.PriorityPool","^6W"]]],["^1W","com/cognitect/transit/delimiters.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["^1W","goog/date/date.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^4J","~$goog.i18n.DateTimeSymbols","^4X"]]],["^1W","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^53","^51","^52","^70","^79","~$goog.html.SafeStyleSheet","^76","~$goog.dom.TagName","^50","^54","^4J","^58","^4P","^13","^4H","~$goog.dom.tags","^71"]]],["^1W","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^13"]]],["^1W","goog/math/size.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["^1W","com/fulcrologic/fulcro/raw/components.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^13","^4V","^1D","^67","^Y","^17","^O","~$com.fulcrologic.fulcro.algorithms.transit","^P","^4W","^T"]]],["^1W","goog/structs/queue.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^4P"]]],["^1W","goog/labs/useragent/engine.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^4P","^4H","^4I"]]],["^1W","com/fulcrologic/fulcro/inspect/transit.cljs"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^66","~$com.cognitect.transit.types","^7C","^T"]]],["^1W","com/cognitect/transit/impl/decoder.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","~$com.cognitect.transit.util","~$com.cognitect.transit.delimiters","^5D","^7D"]]],["^1W","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["^1W","cljs/reader.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^13","^5S","^6O","^5T"]]],["^1W","com/fulcrologic/fulcro/mutations.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^W","~$com.fulcrologic.fulcro.dom.events","^4U","^P","^T","^4W","^?","^17","^75","^1B","^O","^15","^1D"]]],["^1W","goog/dom/dom.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^4P","^4J","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^7A","~$goog.dom.safe","^78","^7:","~$goog.math.Coordinate","~$goog.math.Size","^13","^4X","^53","~$goog.string.Unicode","^4Z"]]],["^1W","com/fulcrologic/guardrails/impl/externs.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","~$com.fulcrologic.guardrails.registry","^6E"]]],["^1W","com/fulcrologic/fulcro/components.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^13","~$module$node_modules$react$index","^P","^?","^T","^67","^1D","^17","^Y","^O","^W","^4U","^4V"]]],["^1W","com/fulcrologic/fulcro/specs.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^?","^4U","^17","^P"]]],["^1W","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","~$goog.debug.Error","^7I"]]],["^1W","cljs/core/async/impl/buffers.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^4G"]]],["^1W","goog/i18n/timezone.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^4P","~$goog.date.DateLike","^13","^4X"]]],["^1W","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^4P","^4J","^5W","^4X","^6U","^62","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1W","goog/net/errorcode.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["^1W","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["^1W","goog/iter/es6.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","~$goog.iter.Iterable","^6X","^7<"]]],["^1W","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["^6J","node_modules/object-assign/index.js"],["1c6e82d3f9756822c3b08dd8f8e1d7c23a7f1630","3679a1a898d0c80b330819274df3fe1302fa19d1","519ffd5a4c91b67302cc9947b794966d629860cd","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^6K"]]],["^1W","goog/debug/errorhandler.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^6B","^4J","~$goog.debug.EntryPointMonitor","^7P"]]],["^1W","goog/disposable/idisposable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["^1W","goog/promise/promise.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^4S","^4J","^5E","~$goog.async.run","^5B","^7P","~$goog.promise.Resolver"]]],["^1W","cljs/core/async/impl/timers.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^4G","^4K","^4N"]]],["^1W","cljs/spec/alpha.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^13","^67","~$cljs.spec.gen.alpha","^1D"]]],["^1W","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["^1W","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",[]]],["^1W","goog/json/hybrid.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^4J","~$goog.json"]]],["^1W","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^4P","^13"]]],["^1W","cljs/tools/reader/impl/errors.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^5P","^1D","~$cljs.tools.reader.impl.inspect"]]],["^1W","com/fulcrologic/fulcro/algorithms/scheduling.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^4U","^A","^T"]]],["^1W","goog/disposable/dispose.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["^1W","clojure/string.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^4X","^5T"]]],["^1W","com/fulcrologic/fulcro/algorithms/tempid.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^T","^67"]]],["^1W","goog/structs/pool.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^6B","~$goog.structs.Queue","~$goog.structs.Set"]]],["^1W","com/fulcrologic/fulcro/inspect/diff.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^?"]]],["^6J","node_modules/react/cjs/react.production.min.js"],["1c6e82d3f9756822c3b08dd8f8e1d7c23a7f1630","3679a1a898d0c80b330819274df3fe1302fa19d1","0a81b45abe33f0ad39b726512604018f94261db9","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^6K","^6Z"]]],["^1W","goog/net/httpstatus.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["^1W","goog/i18n/datetimeformat.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^4J","^6>","~$goog.date.UtcDateTime","^7?","~$goog.i18n.LocaleFeature","~$goog.i18n.NativeLocaleDigits","~$goog.i18n.TimeZone","^4X","~$goog.i18n.DateTimeSymbolsType"]]],["^1W","com/cognitect/transit/handlers.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^7E","^7D","~$goog.math.Long"]]],["^1W","goog/structs/heap.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^4P","^13","~$goog.structs.Node"]]],["^1W","goog/debug/entrypointregistry.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^4J"]]],["^1W","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^7J","^7:","^53","^4H"]]],["^1W","com/cognitect/transit/types.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^7E","~$com.cognitect.transit.eq","^86"]]],["^1W","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["^1W","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","~$goog.labs.userAgent","^4H"]]],["^1W","expound/printer.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^1D","^?","^C","^4V","^6:","^6;","^57","^67","^6P","^4X"]]],["^1W","com/fulcrologic/fulcro/algorithms/tx_processing.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^4V","^?","^O","^15","^Y","^17","^18","^[","^4E","~$com.fulcrologic.fulcro.specs","^65","^4U","^P","^4W","^T"]]],["^1W","com/cognitect/transit/eq.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^7E"]]],["^1W","goog/debug/debug.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^4P","~$goog.debug.errorcontext"]]],["^1W","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["^1W","goog/math/coordinate.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","~$goog.math"]]],["^1W","goog/debug/errorcontext.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["^1W","cljs/tools/reader/reader_types.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^5Q","^4X","^5T"]]],["^1W","goog/iter/iter.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^4P","^4J","~$goog.debug","^U","^8<"]]],["^1W","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["^1W","goog/async/nexttick.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^5F","^Q","^7A","^U","^58","^59"]]],["^1W","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^4J","^78","^70","^79","^7@","^76","^50","^53","^4H","^51"]]],["^1W","com/fulcrologic/fulcro/data_fetch.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^67","^17","^75","^1<","^1B","^W","^[","^?","^4U","^P","^T","^O"]]],["^1W","com/cognitect/transit/caching.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^7F"]]],["^1W","goog/events/event.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^6B","^5?"]]],["^1W","cljs/tools/reader/impl/commons.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^5O","^5P","^5Q"]]],["^1W","goog/events/eventhandler.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^6B","^6C","^13","^5>","^5?","^4R","^5L"]]],["^1W","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["^1W","cljs/core.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^86","~$goog.math.Integer","^4X","^13","^4P","^4T","^5T"]]],["^1W","com/cognitect/transit.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^7E","~$com.cognitect.transit.impl.reader","~$com.cognitect.transit.impl.writer","^7D","^88","^5C","^5D"]]],["^1W","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^53","^54","^71","^4J"]]],["^1W","goog/log/log.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^4J","^8="]]],["^1W","goog/async/throwexception.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["^1W","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^53","^79","^54","^13","^4J","^4H"]]],["^1W","goog/structs/collection.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["^1W","goog/events/browserevent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^8=","^5>","~$goog.events.EventType","^5;","^4Z"]]],["^1W","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^5;"]]],["^1W","goog/structs/node.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["^1W","goog/dom/browserfeature.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^4Z"]]],["^1W","clojure/set.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11"]]],["^1W","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^4J","^4X"]]],["^1W","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^4J","^54"]]],["^1W","goog/disposable/disposeall.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^6H"]]],["^1W","goog/json/json.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["^1W","goog/i18n/localefeature.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["^1W","goog/events/listenable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^5?","^5K","^5M"]]],["^1W","goog/events/listenablekey.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^5H"]]],["^1W","com/cognitect/transit/impl/writer.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^7E","^5D","~$com.cognitect.transit.handlers","^7D","^7F","^86"]]],["^1W","goog/net/xmlhttpfactory.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^63"]]],["^1W","com/fulcrologic/fulcro/algorithms/denormalize.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^4V","^P","^T"]]],["^1W","goog/net/xmlhttp.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^4J","~$goog.net.WrapperXmlHttpFactory","^64","^63"]]],["^1W","com/fulcrologic/fulcro/inspect/inspect_client.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^P","^O","^13","~$com.fulcrologic.fulcro.inspect.diff","~$com.fulcrologic.fulcro.inspect.transit","^A","^4W","^T"]]],["^1W","goog/net/xhrlike.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14"]]],["^1W","cognitect/transit.cljs"],["ae688999ee978d238bffd4df0c0323e552d6d8dc","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","~$com.cognitect.transit","^7D","^88","^86"]]],["^1W","com/fulcrologic/fulcro/raw/application.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^11","^1D","^Y","^17","^1>","^O","^1B","^R","^18","^15","^1<","^1F","^1@","^[","^W","^P","^13","^U","^Q","^T"]]],["^1W","goog/crypt/base64.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4A",["^ ","^4B",null,"^4C",["^F",[]],"^4D",["^14","^4J","^55","^4H","^4Z","~$goog.userAgent.product"]]]]],"~:clj-info",["^ ","jar:file:/Users/guilhermecintra/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/utils.cljc",1642814467000,"jar:file:/Users/guilhermecintra/.m2/repository/io/aviso/pretty/0.1.37/pretty-0.1.37.jar!/io/aviso/columns.clj",1642814470000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/instant.clj",1642814470000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer/env.clj",1632355889000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/cljs/core/async.clj",1642814473000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1632257295000,"jar:file:/Users/guilhermecintra/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/tx_processing.cljc",1642814471000,"jar:file:/Users/guilhermecintra/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/paths.cljc",1642814468000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/tools.analyzer.jvm/1.2.0/tools.analyzer.jvm-1.2.0.jar!/clojure/tools/analyzer/jvm/utils.clj",1632355889000,"jar:file:/Users/guilhermecintra/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/impl/pro.cljc",1642814467000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1632257295000,"jar:file:/Users/guilhermecintra/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/config.cljc",1642814467000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/main.clj",1632257295000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/channels.clj",1642814473000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/externs.clj",1642814470000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1632257295000,"jar:file:/Users/guilhermecintra/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/impl/externs.cljc",1642814467000,"jar:file:/Users/guilhermecintra/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/merge.cljc",1642814471000,"jar:file:/Users/guilhermecintra/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/normalize.cljc",1642814471000,"jar:file:/Users/guilhermecintra/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/raw/components.cljc",1642814471000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/gen/alpha.clj",1632257294000,"jar:file:/Users/guilhermecintra/.m2/repository/com/taoensso/truss/1.6.0/truss-1.6.0.jar!/taoensso/truss/impl.clj",1642814471000,"jar:file:/Users/guilhermecintra/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/transit.cljc",1642814471000,"jar:file:/Users/guilhermecintra/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/tempid.cljc",1642814471000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1642814472000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/spec/gen/alpha.cljc",1642814470000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1632257295000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/cljs/core/async/impl/ioc_macros.clj",1642814473000,"jar:file:/Users/guilhermecintra/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc",1642814471000,"jar:file:/Users/guilhermecintra/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/denormalize.cljc",1642814471000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/analyzer/passes/and_or.cljc",1642814470000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/core.cljc",1642814470000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/protocols.clj",1642814473000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/concurrent.clj",1642814473000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/alpha.clj",1632257294000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer/utils.clj",1632355889000,"jar:file:/Users/guilhermecintra/.m2/repository/binaryage/devtools/1.0.4/devtools-1.0.4.jar!/devtools/defaults.clj",1642814471000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/tagged_literals.cljc",1642814470000,"jar:file:/Users/guilhermecintra/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/core.cljc",1642814467000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/env.cljc",1642814470000,"jar:file:/Users/guilhermecintra/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/alpha.cljc",1642814468000,"jar:file:/Users/guilhermecintra/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/lookup.cljc",1642814471000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/analyzer/passes.cljc",1642814470000,"jar:file:/Users/guilhermecintra/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/scheduling.cljc",1642814471000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/analyzer.cljc",1642814470000,"jar:file:/Users/guilhermecintra/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/dom/events.cljc",1642814471000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/cljs/tools/reader/reader_types.clj",1642814472000,"jar:file:/Users/guilhermecintra/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/do_not_use.cljc",1642814471000,"jar:file:/Users/guilhermecintra/.m2/repository/com/taoensso/encore/3.10.1/encore-3.10.1.jar!/taoensso/encore.cljc",1642814468000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/spec/alpha.cljc",1642814470000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/walk.clj",1632257295000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1632257295000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1642814472000,"jar:file:/Users/guilhermecintra/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/ansi.cljc",1642814468000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/source_map/base64_vlq.clj",1642814470000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/buffers.clj",1642814473000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer.clj",1632355889000,"jar:file:/Users/guilhermecintra/.m2/repository/io/aviso/pretty/0.1.37/pretty-0.1.37.jar!/io/aviso/exception.clj",1642814470000,"jar:file:/Users/guilhermecintra/.m2/repository/io/aviso/pretty/0.1.37/pretty-0.1.37.jar!/io/aviso/ansi.clj",1642814470000,"jar:file:/Users/guilhermecintra/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/impl/parser.clj",1642814467000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1642814472000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/source_map.clj",1642814470000,"jar:file:/Users/guilhermecintra/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/data_targeting.cljc",1642814471000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/pprint.cljc",1642814470000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/source_map/base64.clj",1642814470000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1642814472000,"jar:file:/Users/guilhermecintra/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/problems.cljc",1642814468000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/util.cljc",1642814470000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1642814472000,"jar:file:/Users/guilhermecintra/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/registry.cljc",1642814467000,"jar:file:/Users/guilhermecintra/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/components.cljc",1642814471000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1632257295000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/mutex.clj",1642814473000,"jar:file:/Users/guilhermecintra/.m2/repository/com/cognitect/transit-clj/1.0.324/transit-clj-1.0.324.jar!/cognitect/transit.clj",1642814471000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/compiler.cljc",1642814470000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1632257295000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/edn.clj",1642814472000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/js_deps.cljc",1642814470000,"jar:file:/Users/guilhermecintra/.m2/repository/com/taoensso/timbre/5.1.1/timbre-5.1.1.jar!/taoensso/timbre/appenders/core.cljc",1642814472000,"jar:file:/Users/guilhermecintra/.m2/repository/edn-query-language/eql/1.0.1/eql-1.0.1.jar!/edn_query_language/core.cljc",1642814467000,"jar:file:/Users/guilhermecintra/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/inspect/inspect_client.cljc",1642814471000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async.clj",1642814473000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar!/clojure/data/json.clj",1642786736000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/tools.analyzer.jvm/1.2.0/tools.analyzer.jvm-1.2.0.jar!/clojure/tools/analyzer/jvm.clj",1632355889000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/analyzer/impl.cljc",1642814470000,"jar:file:/Users/guilhermecintra/.m2/repository/com/taoensso/truss/1.6.0/truss-1.6.0.jar!/taoensso/truss.clj",1642814471000,"jar:file:/Users/guilhermecintra/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/mutations.cljc",1642814471000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/reader.clj",1642814470000,"jar:file:/Users/guilhermecintra/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/util.cljc",1642814468000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer/ast.clj",1632355889000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/ioc_macros.clj",1642814473000,"jar:file:/Users/guilhermecintra/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/printer.cljc",1642814468000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/stacktrace.clj",1632257295000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/dispatch.clj",1642814473000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/reflect.clj",1632257295000,"jar:file:/Users/guilhermecintra/.m2/repository/com/taoensso/timbre/5.1.1/timbre-5.1.1.jar!/taoensso/timbre.cljc",1642814472000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/exec/threadpool.clj",1642814473000,"jar:file:/Users/guilhermecintra/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/timers.clj",1642814473000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","com/fulcrologic/fulcro/raw/application.cljc","^7",1,"^8",5,"^9",1,"^:",43],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C"],"^D",null,"^E",["^F",[]],"^G","^H","^I",["^ "],"^L",null,"^M",["^ ","^N","^O","^P","^P","^Q","^Q","^R","^R","^S","^T","^U","^U","^V","^W","^X","^P","^Y","^Y","^Z","^[","^10","^R","^11","^11","^12","^13","^14","^14","^13","^13","^15","^15","^16","^17","^18","^18","^19","^Q","^1:","^18","^1;","^1<","^1=","^1>","^1?","^1@","^[","^[","^O","^O","^1@","^1@","^1A","^1B","^1<","^1<","^T","^T","^W","^W","^1C","^1D","^1B","^1B","^1D","^1D","^1E","^Y","^1F","^1F","^1G","^1F","^1>","^1>","^1H","^15","^17","^17"],"^1I",["^F",["^1J"]],"~:shadow/js-access-global",["^F",["Error"]],"^1K",["^ ","^1L","^U"],"~:defs",["^ ","~$add-render-listener!",["^ ","~:protocol-inline",null,"^5",["^ ","^6","com/fulcrologic/fulcro/raw/application.cljc","^7",326,"^8",7,"^9",326,"^:",27,"~:arglists",["^1O",["~$quote",["^1O",[["~$app","~$nm","~$listener"]]]]],"~:doc","Add (or replace) a render listener named `nm`. `listener` is a `(fn [app options] )` that will be called\n   after each render.\n\n   See the `:batch-notifications` option of the application, which can be set when using certain verions of React to\n   improve performance and reduce over-rendering."],"^G","^2Y","^6","com/fulcrologic/fulcro/raw/application.cljc","^:",27,"~:method-params",["^1O",[["^:Z","^:[","^;0"]]],"~:protocol-impl",null,"~:arglists-meta",["^1O",[null,null]],"^8",1,"~:variadic?",false,"^7",326,"~:ret-tag",["^F",[null,"~$any"]],"^9",326,"~:max-fixed-arity",3,"~:fn-var",true,"^:X",["^1O",["^:Y",["^1O",[["^:Z","^:[","^;0"]]]]],"^;1","Add (or replace) a render listener named `nm`. `listener` is a `(fn [app options] )` that will be called\n   after each render.\n\n   See the `:batch-notifications` option of the application, which can be set when using certain verions of React to\n   improve performance and reduce over-rendering."],"~$default-global-eql-transform",["^ ","^:W",null,"^5",["^ ","^6","com/fulcrologic/fulcro/raw/application.cljc","^7",137,"^8",7,"^9",137,"^:",35,"^:X",["^1O",["^:Y",["^1O",[["~$ast"]]]]],"^;1","The default query transform function.  It makes sure the following items on a component query\n  are never sent to the server:\n\n  - Props whose namespace is `ui`\n  - Any prop or join that is namespaced to com.fulcrologic.fulcro*\n  - Any ident (as a prop or join) whose table name is namespaced ui or com.fulcrologic.fulcro*\n\n  Takes an AST and returns the modified AST.\n  "],"^G","^2R","^6","com/fulcrologic/fulcro/raw/application.cljc","^:",35,"^;2",["^1O",[["^;;"]]],"^;3",null,"^;4",["^1O",[null,null]],"^8",1,"^;5",false,"^7",137,"^;6",["^F",["~$clj","^;7","~$clj-nil"]],"^9",137,"^;8",1,"^;9",true,"^:X",["^1O",["^:Y",["^1O",[["^;;"]]]]],"^;1","The default query transform function.  It makes sure the following items on a component query\n  are never sent to the server:\n\n  - Props whose namespace is `ui`\n  - Any prop or join that is namespaced to com.fulcrologic.fulcro*\n  - Any ident (as a prop or join) whose table name is namespaced ui or com.fulcrologic.fulcro*\n\n  Takes an AST and returns the modified AST.\n  "],"~$add-component!",["^ ","^:W",null,"^5",["^ ","^6","com/fulcrologic/fulcro/raw/application.cljc","^7",456,"^8",7,"^9",456,"^:",21,"^:X",["^1O",["^:Y",["^1O",[["^:Z","~$component",["^ ","~:keys",["~$receive-props","~$initialize?","~$keep-existing?","~$initial-params"],"^1Q","~$options"]]]]]],"^;1","Use a component (that has initial state) as a subtree managed by Fulcro. This establishes props updates to non-React UI,\n   and is not rendered by normal Fulcro rendering.\n\n   The `component` should be a real Fulcro component or a generated normalizing component from `nc` (or similar) that\n   has initial state. .\n\n   The options map can contain:\n\n   * `:initialize?` - Pass true if you want the initial state of component to be merged into app state.\n   * `:keep-existing?` - Only valid if `initialize?` is true. When true, indicates initialize should only\n                         be done if there isn't already state at the component's ident in the database.\n   * `:initial-params` - The parameters to pass to the component's `get-initial-state` when initializing.\n   * `:receive-props` - REQUIRED: The function to call when the props change in the Fulcro state. This is a\n                        `(fn [props] )` where the props will be the component props.\n  "],"^G","^2P","^6","com/fulcrologic/fulcro/raw/application.cljc","^:",21,"^;2",["^1O",[["^:Z","^;?","~$p__62214"]]],"^;3",null,"^;4",["^1O",[null,null]],"^8",1,"^;5",false,"^7",456,"^;6",["^F",[null,"^;7"]],"^9",456,"^;8",3,"^;9",true,"^:X",["^1O",["^:Y",["^1O",[["^:Z","^;?",["^ ","^;@",["^;A","^;B","^;C","^;D"],"^1Q","^;E"]]]]]],"^;1","Use a component (that has initial state) as a subtree managed by Fulcro. This establishes props updates to non-React UI,\n   and is not rendered by normal Fulcro rendering.\n\n   The `component` should be a real Fulcro component or a generated normalizing component from `nc` (or similar) that\n   has initial state. .\n\n   The options map can contain:\n\n   * `:initialize?` - Pass true if you want the initial state of component to be merged into app state.\n   * `:keep-existing?` - Only valid if `initialize?` is true. When true, indicates initialize should only\n                         be done if there isn't already state at the component's ident in the database.\n   * `:initial-params` - The parameters to pass to the component's `get-initial-state` when initializing.\n   * `:receive-props` - REQUIRED: The function to call when the props change in the Fulcro state. This is a\n                        `(fn [props] )` where the props will be the component props.\n  "],"~$maybe-merge-new-root!",["^ ","^:W",null,"^5",["^ ","^6","com/fulcrologic/fulcro/raw/application.cljc","^7",385,"^8",7,"^9",385,"^:",28,"^:X",["^1O",["^:Y",["^1O",[["^:Z","~$root-key","^;?",["^ ","^;@",["^;C","^;D","^;B"],"~:or",["^ ","^;D",["^ "]]]]]]]],"^;1","A helper for `add-root!` and similar. Populates the initial state for a subtree depending on `initialize?` and `keep-existing?`\n\n   :keep-existing? - A boolean. If true, then the state will not be initialized if there\n   is already data at the `root-key`.\n  "],"^G","^2O","^6","com/fulcrologic/fulcro/raw/application.cljc","^:",28,"^;2",["^1O",[["^:Z","^;H","^;?","~$p__62201"]]],"^;3",null,"^;4",["^1O",[null,null]],"^8",1,"^;5",false,"^7",385,"^;6",["^F",[null,"^;7","^;="]],"^9",385,"^;8",4,"^;9",true,"^:X",["^1O",["^:Y",["^1O",[["^:Z","^;H","^;?",["^ ","^;@",["^;C","^;D","^;B"],"^;I",["^ ","^;D",["^ "]]]]]]]],"^;1","A helper for `add-root!` and similar. Populates the initial state for a subtree depending on `initialize?` and `keep-existing?`\n\n   :keep-existing? - A boolean. If true, then the state will not be initialized if there\n   is already data at the `root-key`.\n  "],"~$fulcro-app?",["^ ","^:W",null,"^5",["^ ","^6","com/fulcrologic/fulcro/raw/application.cljc","^7",289,"^8",7,"^9",289,"^:",18,"^:X",["^1O",["^:Y",["^1O",[["~$x"]]]]],"^;1","Returns true if the given `x` is a Fulcro application."],"^G","^2M","^6","com/fulcrologic/fulcro/raw/application.cljc","^:",18,"^;2",["^1O",[["~$x"]]],"^;3",null,"^;4",["^1O",[null,null]],"^8",1,"^;5",false,"^7",289,"^;6","~$boolean","^9",289,"^;8",1,"^;9",true,"^:X",["^1O",["^:Y",["^1O",[["~$x"]]]]],"^;1","Returns true if the given `x` is a Fulcro application."],"~$current-state",["^ ","^:W",null,"^5",["^ ","^6","com/fulcrologic/fulcro/raw/application.cljc","^7",29,"^8",7,"^9",29,"^:",20,"^:X",["^1O",["^:Y",["^1O",[["~$app-or-component"]]]]],"^;1","Get the current value of the application state database. If called without arguments it will attempt to find the app\n   in the dynamically-bound comp/*app*, which is bound during render."],"^G","^2X","^6","com/fulcrologic/fulcro/raw/application.cljc","^:",20,"^;2",["^1O",[["^;N"]]],"^;3",null,"^;4",["^1O",[null,null]],"^8",1,"^;5",false,"^7",29,"^;6","^;7","^9",29,"^;8",1,"^;9",true,"^:X",["^1O",["^:Y",["^1O",[["^;N"]]]]],"^;1","Get the current value of the application state database. If called without arguments it will attempt to find the app\n   in the dynamically-bound comp/*app*, which is bound during render."],"~$initialize-state!",["^ ","^:W",null,"^5",["^ ","^6","com/fulcrologic/fulcro/raw/application.cljc","^7",164,"^8",7,"^9",164,"^:",24,"^:X",["^1O",["^:Y",["^1O",[["^:Z","~$root"]]]]],"^;1","Initialize the app state using `root` component's app state. This will deep merge against any data that is already\n  in the state atom of the app. Can be called before `mount!`, in which case you should tell mount not to (re) initialize\n  state."],"^G","^2[","^6","com/fulcrologic/fulcro/raw/application.cljc","^:",24,"^;2",["^1O",[["^:Z","^;P"]]],"^;3",null,"^;4",["^1O",[null,null]],"^8",1,"^;5",false,"^7",164,"^;6",["^F",[null,"^;7"]],"^9",164,"^;8",2,"^;9",true,"^:X",["^1O",["^:Y",["^1O",[["^:Z","^;P"]]]]],"^;1","Initialize the app state using `root` component's app state. This will deep merge against any data that is already\n  in the state atom of the app. Can be called before `mount!`, in which case you should tell mount not to (re) initialize\n  state."],"~$remove-component!",["^ ","^:W",null,"^5",["^ ","^6","com/fulcrologic/fulcro/raw/application.cljc","^7",485,"^8",7,"^9",485,"^:",24,"^:X",["^1O",["^:Y",["^1O",[["^:Z","^;?"]]]]],"^;1","Remove a root key managed subtree from Fulcro. Does not GC the state, just stops sending props updates on render."],"^G","^34","^6","com/fulcrologic/fulcro/raw/application.cljc","^:",24,"^;2",["^1O",[["^:Z","^;?"]]],"^;3",null,"^;4",["^1O",[null,null]],"^8",1,"^;5",false,"^7",485,"^;6",["^F",[null,"^;7"]],"^9",485,"^;8",2,"^;9",true,"^:X",["^1O",["^:Y",["^1O",[["^:Z","^;?"]]]]],"^;1","Remove a root key managed subtree from Fulcro. Does not GC the state, just stops sending props updates on render."],"~$render!",["^ ","^:W",null,"^5",["^ ","^6","com/fulcrologic/fulcro/raw/application.cljc","^7",81,"^8",7,"^9",81,"^:",14,"^:X",["^1O",["^:Y",["^1O",[["^:Z"],["^:Z",["^ ","^;@",["~$force-root?"],"^1Q","^;E"]]]]]],"^;1","Render the application immediately.  Prefer `schedule-render!`, which will ensure no more than 60fps.\n\n  This is the central processing for render and cannot be overridden. `schedule-render!` will always invoke\n  this function.  The optimized render is called by this function, which does extra bookkeeping and\n  other supporting features common to all rendering.\n\n  Options include:\n  - `force-root?`: boolean.  When true disables all optimizations and forces a full root re-render.\n  - anything your selected rendering optization system allows.  Shared props are updated via `shared-fn`\n  only on `force-root?` and when (shallow) root props change.\n  ","~:top-fn",["^ ","^;5",false,"~:fixed-arity",2,"^;8",2,"^;2",[["^:Z"],["^:Z",["^ ","^;@",["^;S"],"^1Q","^;E"]]],"^:X",["^1O",[["^:Z"],["^:Z",["^ ","^;@",["^;S"],"^1Q","^;E"]]]],"^;4",["^1O",[null,null]]]],"^G","^30","^6","com/fulcrologic/fulcro/raw/application.cljc","^:",14,"^;T",["^ ","^;5",false,"^;U",2,"^;8",2,"^;2",[["^:Z"],["^:Z",["^ ","^;@",["^;S"],"^1Q","^;E"]]],"^:X",["^1O",[["^:Z"],["^:Z",["^ ","^;@",["^;S"],"^1Q","^;E"]]]],"^;4",["^1O",[null,null]]],"^;2",[["^:Z"],["^:Z",["^ ","^;@",["^;S"],"^1Q","^;E"]]],"^;3",null,"^;U",2,"^;4",["^1O",[null,null]],"^8",1,"^;5",false,"~:methods",[["^ ","^;U",1,"^;5",false,"~:tag","^;7"],["^ ","^;U",2,"^;5",false,"^;W",["^F",["^;7","^;="]]]],"^7",81,"^9",81,"^;8",2,"^;9",true,"^:X",["^1O",[["^:Z"],["^:Z",["^ ","^;@",["^;S"],"^1Q","^;E"]]]],"^;1","Render the application immediately.  Prefer `schedule-render!`, which will ensure no more than 60fps.\n\n  This is the central processing for render and cannot be overridden. `schedule-render!` will always invoke\n  this function.  The optimized render is called by this function, which does extra bookkeeping and\n  other supporting features common to all rendering.\n\n  Options include:\n  - `force-root?`: boolean.  When true disables all optimizations and forces a full root re-render.\n  - anything your selected rendering optization system allows.  Shared props are updated via `shared-fn`\n  only on `force-root?` and when (shallow) root props change.\n  "],"~$get-root-subtree-props",["^ ","^:W",null,"^5",["^ ","^6","com/fulcrologic/fulcro/raw/application.cljc","^7",375,"^8",7,"^9",375,"^:",29,"^:X",["^1O",["^:Y",["^1O",[["^:Z","^;H","^;?","~$prior-props"]]]]],"^;1","Uses `fdn/traced-db->tree` to get the props of the subtree at `root-key`. If `prior-props` are not stale, those are\n   returned instead."],"^G","^3;","^6","com/fulcrologic/fulcro/raw/application.cljc","^:",29,"^;2",["^1O",[["^:Z","^;H","^;?","^;Y"]]],"^;3",null,"^;4",["^1O",[null,null]],"^8",1,"^;5",false,"^7",375,"^;6",["^F",[null,"^;7"]],"^9",375,"^;8",4,"^;9",true,"^:X",["^1O",["^:Y",["^1O",[["^:Z","^;H","^;?","^;Y"]]]]],"^;1","Uses `fdn/traced-db->tree` to get the props of the subtree at `root-key`. If `prior-props` are not stale, those are\n   returned instead."],"~$maybe-merge-new-component!",["^ ","^:W",null,"^5",["^ ","^6","com/fulcrologic/fulcro/raw/application.cljc","^7",439,"^8",7,"^9",439,"^:",33,"^:X",["^1O",["^:Y",["^1O",[["^:Z","^;?","~$component-data",["^ ","^;@",["^;C","^;B"],"^;I",["^ ","^;B",true]]]]]]],"^;1","Helper for `add-component!` and similar. Populates the component state depending on `initialize?` and `keep-existing?`.\n\n   `app` - The app\n   `component` - A component (e.g. from `nc`)\n   `component-data` - A tree of data that matches the shape of the component's query.\n   `initialize?` is true by default.\n   `:keep-existing?` - A boolean (default false). If true, then the state of the component will not be initialized if there\n   is already data at the component's ident (which will be computed using the initial entity provided).\n  "],"^G","^3?","^6","com/fulcrologic/fulcro/raw/application.cljc","^:",33,"^;2",["^1O",[["^:Z","^;?","^;[","~$p__62211"]]],"^;3",null,"^;4",["^1O",[null,null]],"^8",1,"^;5",false,"^7",439,"^;6",["^F",[null,"^;7","^;="]],"^9",439,"^;8",4,"^;9",true,"^:X",["^1O",["^:Y",["^1O",[["^:Z","^;?","^;[",["^ ","^;@",["^;C","^;B"],"^;I",["^ ","^;B",true]]]]]]],"^;1","Helper for `add-component!` and similar. Populates the component state depending on `initialize?` and `keep-existing?`.\n\n   `app` - The app\n   `component` - A component (e.g. from `nc`)\n   `component-data` - A tree of data that matches the shape of the component's query.\n   `initialize?` is true by default.\n   `:keep-existing?` - A boolean (default false). If true, then the state of the component will not be initialized if there\n   is already data at the component's ident (which will be computed using the initial entity provided).\n  "],"~$fulcro-app",["^ ","^:W",null,"^5",["^ ","^6","com/fulcrologic/fulcro/raw/application.cljc","^7",184,"^8",7,"^9",184,"^:",17,"^:X",["^1O",["^:Y",["^1O",[[],[["^ ","^;@",["~$props-middleware","~$global-eql-transform","~$global-error-action","~$default-result-action!","~$core-render!","~$optimized-render!","~$batch-notifications","~$render-root!","~$hydrate-root!","~$unmount-root!","~$submit-transaction!","~$abort-transaction!","~$render-middleware","~$initial-db","~$client-will-mount","~$client-did-mount","~$remote-error?","~$remotes","~$query-transform-default","~$load-marker-default","~$load-mutation","~$root-class","~$shared","~$external-config","~$shared-fn"],"^1Q","^;E"]]]]]],"^;1","Create a new Fulcro application. See com.fulcrologic.fulcro.application/fulcro-app for the React-based initializer.\n\n  This version creates an app that is not attached to React, and has no default root or optimized render. The\n  map of initial options is the same *except* that react-centric options are obviously ignore, and also:\n\n   * `:optimized-render!` - A `(fn ([app]) ([app txn-options]))` that can analyze the state of the application and optimally refresh the screen. Defaults to a no-op.\n     This function is normally called from core-render!, and therefore is useless unless you define a `core-render!` that calls it.\n   * `:core-render!` - A (fn [app txn-options] side-effect) that is called by schedule render. If you fail to supply this on a raw app, then\n     NO rendering will happen; however, render listeners will still be called.\n   * `:batch-notifications` - A side-effecting function `(fn [notify-all])` that can surround a batch of render notifiations with a context. The only\n     argument to this function is `notify-all`, which is a function that will do the actual notifications. This is useful when using render\n     notifications with React hooks, and need to tell React that a bunch of state changes need to happen together. The\n     normal setting for this (if you're using hooks and render listeners) is\n     `(fn [render!] (react-dom/unstable_batchedUpdates render!))` or\n     `(fn [render!] (react-native/unstable_batchedUpdates render!))`.\n\n  Note that raw apps are not mounted, but are instead ready to be used immediately.  If you want to use inspect, then\n  you must call `(inspect/client-started! app)` yourself.\n\n  Indexing is available, but normally runs from React lifecycle, so unless you're using this with React indexes will be non-managed.\n  ","^;T",["^ ","^;5",false,"^;U",1,"^;8",1,"^;2",[[],[["^ ","^;@",["^<2","^<3","^<4","^<5","^<6","^<7","^<8","^<9","^<:","^<;","^<<","^<=","^<>","^<?","^<@","^<A","^<B","^<C","^<D","^<E","^<F","^<G","^<H","^<I","^<J"],"^1Q","^;E"]]],"^:X",["^1O",[[],[["^ ","^;@",["^<2","^<3","^<4","^<5","^<6","^<7","^<8","^<9","^<:","^<;","^<<","^<=","^<>","^<?","^<@","^<A","^<B","^<C","^<D","^<E","^<F","^<G","^<H","^<I","^<J"],"^1Q","^;E"]]]],"^;4",["^1O",[null,null]]]],"^G","^3@","^6","com/fulcrologic/fulcro/raw/application.cljc","^:",17,"^;T",["^ ","^;5",false,"^;U",1,"^;8",1,"^;2",[[],[["^ ","^;@",["^<2","^<3","^<4","^<5","^<6","^<7","^<8","^<9","^<:","^<;","^<<","^<=","^<>","^<?","^<@","^<A","^<B","^<C","^<D","^<E","^<F","^<G","^<H","^<I","^<J"],"^1Q","^;E"]]],"^:X",["^1O",[[],[["^ ","^;@",["^<2","^<3","^<4","^<5","^<6","^<7","^<8","^<9","^<:","^<;","^<<","^<=","^<>","^<?","^<@","^<A","^<B","^<C","^<D","^<E","^<F","^<G","^<H","^<I","^<J"],"^1Q","^;E"]]]],"^;4",["^1O",[null,null]]],"^;2",[[],[["^ ","^;@",["^<2","^<3","^<4","^<5","^<6","^<7","^<8","^<9","^<:","^<;","^<<","^<=","^<>","^<?","^<@","^<A","^<B","^<C","^<D","^<E","^<F","^<G","^<H","^<I","^<J"],"^1Q","^;E"]]],"^;3",null,"^;U",1,"^;4",["^1O",[null,null]],"^8",1,"^;5",false,"^;V",[["^ ","^;U",0,"^;5",false,"^;W","^;7"],["^ ","^;U",1,"^;5",false,"^;W","~$cljs.core/IMap"]],"^7",184,"^9",184,"^;8",1,"^;9",true,"^:X",["^1O",[[],[["^ ","^;@",["^<2","^<3","^<4","^<5","^<6","^<7","^<8","^<9","^<:","^<;","^<<","^<=","^<>","^<?","^<@","^<A","^<B","^<C","^<D","^<E","^<F","^<G","^<H","^<I","^<J"],"^1Q","^;E"]]]],"^;1","Create a new Fulcro application. See com.fulcrologic.fulcro.application/fulcro-app for the React-based initializer.\n\n  This version creates an app that is not attached to React, and has no default root or optimized render. The\n  map of initial options is the same *except* that react-centric options are obviously ignore, and also:\n\n   * `:optimized-render!` - A `(fn ([app]) ([app txn-options]))` that can analyze the state of the application and optimally refresh the screen. Defaults to a no-op.\n     This function is normally called from core-render!, and therefore is useless unless you define a `core-render!` that calls it.\n   * `:core-render!` - A (fn [app txn-options] side-effect) that is called by schedule render. If you fail to supply this on a raw app, then\n     NO rendering will happen; however, render listeners will still be called.\n   * `:batch-notifications` - A side-effecting function `(fn [notify-all])` that can surround a batch of render notifiations with a context. The only\n     argument to this function is `notify-all`, which is a function that will do the actual notifications. This is useful when using render\n     notifications with React hooks, and need to tell React that a bunch of state changes need to happen together. The\n     normal setting for this (if you're using hooks and render listeners) is\n     `(fn [render!] (react-dom/unstable_batchedUpdates render!))` or\n     `(fn [render!] (react-native/unstable_batchedUpdates render!))`.\n\n  Note that raw apps are not mounted, but are instead ready to be used immediately.  If you want to use inspect, then\n  you must call `(inspect/client-started! app)` yourself.\n\n  Indexing is available, but normally runs from React lifecycle, so unless you're using this with React indexes will be non-managed.\n  "],"~$schedule-render!",["^ ","^:W",null,"^5",["^ ","^6","com/fulcrologic/fulcro/raw/application.cljc","^7",124,"^8",9,"^9",124,"^:",25,"^:X",["^1O",["^:Y",["^1O",[["^:Z"],["^:Z","^;E"]]]]],"^;1","Schedule a render on the next animation frame.","^;T",["^ ","^;5",false,"^;U",2,"^;8",2,"^;2",[["^:Z"],["^:Z","^;E"]],"^:X",["^1O",[["^:Z"],["^:Z","^;E"]]],"^;4",["^1O",[null,null]]]],"^G","^3X","^6","com/fulcrologic/fulcro/raw/application.cljc","^:",25,"^;T",["^ ","^;5",false,"^;U",2,"^;8",2,"^;2",[["^:Z"],["^:Z","^;E"]],"^:X",["^1O",[["^:Z"],["^:Z","^;E"]]],"^;4",["^1O",[null,null]]],"^;2",[["^:Z"],["^:Z","^;E"]],"^;3",null,"^;U",2,"^;4",["^1O",[null,null]],"^8",3,"^;5",false,"^;V",[["^ ","^;U",1,"^;5",false,"^;W","^;7"],["^ ","^;U",2,"^;5",false,"^;W","^;7"]],"^7",124,"^9",124,"^;8",2,"^;9",true,"^:X",["^1O",[["^:Z"],["^:Z","^;E"]]],"^;1","Schedule a render on the next animation frame."],"~$tick!",["^ ","^:W",null,"^5",["^ ","^6","com/fulcrologic/fulcro/raw/application.cljc","^7",36,"^8",7,"^9",36,"^:",12,"^:X",["^1O",["^:Y",["^1O",[["^:Z"]]]]],"^;1","Move the basis-t forward one tick. For internal use in internal algorithms. Fulcro\n  uses this to add metadata to props so it can detect the newer of two version of props."],"^G","^3I","^6","com/fulcrologic/fulcro/raw/application.cljc","^:",12,"^;2",["^1O",[["^:Z"]]],"^;3",null,"^;4",["^1O",[null,null]],"^8",1,"^;5",false,"^7",36,"^;6",["^F",[null,"^;7"]],"^9",36,"^;8",1,"^;9",true,"^:X",["^1O",["^:Y",["^1O",[["^:Z"]]]]],"^;1","Move the basis-t forward one tick. For internal use in internal algorithms. Fulcro\n  uses this to add metadata to props so it can detect the newer of two version of props."],"~$basis-t",["^ ","^:W",null,"^5",["^ ","^6","com/fulcrologic/fulcro/raw/application.cljc","^7",24,"^8",7,"^9",24,"^:",14,"^:X",["^1O",["^:Y",["^1O",[["^:Z"]]]]],"^;1","Return the current basis time of the app."],"^G","^3C","^6","com/fulcrologic/fulcro/raw/application.cljc","^:",14,"^;2",["^1O",[["^:Z"]]],"^;3",null,"^;4",["^1O",[null,null]],"^8",1,"^;5",false,"^7",24,"^;6","^;7","^9",24,"^;8",1,"^;9",true,"^:X",["^1O",["^:Y",["^1O",[["^:Z"]]]]],"^;1","Return the current basis time of the app."],"~$add-root!",["^ ","^:W",null,"^5",["^ ","^6","com/fulcrologic/fulcro/raw/application.cljc","^7",401,"^8",7,"^9",401,"^:",16,"^:X",["^1O",["^:Y",["^1O",[["^:Z","^;H","^;?",["^ ","^;@",["^;A","^;B","^;C","^;D"],"^1Q","^;E"]]]]]],"^;1","Use a root key and component as a subtree managed by Fulcro. This establishes props updates to non-React UI,\n   and is not rendered by normal Fulcro rendering. You can integrate with React using `use-root` from the hooks ns.\n\n   The `root-key` must be a unique (namespace recommended) key among all keys used within the application,\n   since the root of the database is where it will live.\n\n   The `component` should be a real Fulcro component or a generated normalizing component from `nc` (or similar).\n\n   The options map can contain:\n\n   * `:initialize?` - Pass true if you want the initial state of component to be merged into app state.\n   * `:keep-existing?` - Only valid if `initialize?` is true. When true, indicates initialize should only\n                         be done if there isn't already state at the component's ident in the database.\n   * `:initial-params` - The parameters to pass to the component's `get-initial-state` when initializing.\n   * `:receive-props` - REQUIRED: The function to call when the props change in the Fulcro state. This is a\n                        `(fn [props] )` where the props will be the component props (sans the root-key).\n\n   NOTE: This function tracks prior props and is capable of a very fast staleness check. It will not call your callback\n   unless it detects an actual change to the data of interest to your UI.\n  "],"^G","^3F","^6","com/fulcrologic/fulcro/raw/application.cljc","^:",16,"^;2",["^1O",[["^:Z","^;H","^;?","~$p__62205"]]],"^;3",null,"^;4",["^1O",[null,null]],"^8",1,"^;5",false,"^7",401,"^;6",["^F",[null,"^;7"]],"^9",401,"^;8",4,"^;9",true,"^:X",["^1O",["^:Y",["^1O",[["^:Z","^;H","^;?",["^ ","^;@",["^;A","^;B","^;C","^;D"],"^1Q","^;E"]]]]]],"^;1","Use a root key and component as a subtree managed by Fulcro. This establishes props updates to non-React UI,\n   and is not rendered by normal Fulcro rendering. You can integrate with React using `use-root` from the hooks ns.\n\n   The `root-key` must be a unique (namespace recommended) key among all keys used within the application,\n   since the root of the database is where it will live.\n\n   The `component` should be a real Fulcro component or a generated normalizing component from `nc` (or similar).\n\n   The options map can contain:\n\n   * `:initialize?` - Pass true if you want the initial state of component to be merged into app state.\n   * `:keep-existing?` - Only valid if `initialize?` is true. When true, indicates initialize should only\n                         be done if there isn't already state at the component's ident in the database.\n   * `:initial-params` - The parameters to pass to the component's `get-initial-state` when initializing.\n   * `:receive-props` - REQUIRED: The function to call when the props change in the Fulcro state. This is a\n                        `(fn [props] )` where the props will be the component props (sans the root-key).\n\n   NOTE: This function tracks prior props and is capable of a very fast staleness check. It will not call your callback\n   unless it detects an actual change to the data of interest to your UI.\n  "],"~$abort!",["^ ","^:W",null,"^5",["^ ","^6","com/fulcrologic/fulcro/raw/application.cljc","^7",295,"^8",7,"^9",295,"^:",13,"^:X",["^1O",["^:Y",["^1O",[["~$app-ish","~$abort-id"]]]]],"^;1","Attempt to abort the send queue entries with the given abort ID.\n\n  NOTE: This can be redefined on an application. If you change your transaction processing routing, then the built-in\n  version will not work, and this docstring does not apply.\n\n  Will notify any aborted operations (e.g. result-handler\n  will be invoked, remote-error? will be used to decide if you consider that an error, etc.).\n  The result map from an abort will include `{::txn/aborted? true}`, but will not include `:status-code` or `:body`.\n\n  This function affects both started and non-started items in the send queues, but will not affect submissions that have not yet\n  made it to the network processing layer (things still in top-level transaction submission queue).\n\n  So the sequence of calls:\n\n  ```\n  (comp/transact! this `[(f)] {:abort-id :a})\n  (app/abort! this :a)\n  ```\n\n  will cancel anything active with abort id `:a`, but since you've held the thread the entire time the submission of\n  mutation `(f)` is still on the submission queue and will not be aborted.\n\n  - `app-ish`: Anything that can be coerced to an app with comp/any->app.\n  - `abort-id`: The abort ID of the operations to be aborted.\n  "],"^G","^3T","^6","com/fulcrologic/fulcro/raw/application.cljc","^:",13,"^;2",["^1O",[["^<R","^<S"]]],"^;3",null,"^;4",["^1O",[null,null]],"^8",1,"^;5",false,"^7",295,"^;6",["^F",["^;7","^;="]],"^9",295,"^;8",2,"^;9",true,"^:X",["^1O",["^:Y",["^1O",[["^<R","^<S"]]]]],"^;1","Attempt to abort the send queue entries with the given abort ID.\n\n  NOTE: This can be redefined on an application. If you change your transaction processing routing, then the built-in\n  version will not work, and this docstring does not apply.\n\n  Will notify any aborted operations (e.g. result-handler\n  will be invoked, remote-error? will be used to decide if you consider that an error, etc.).\n  The result map from an abort will include `{::txn/aborted? true}`, but will not include `:status-code` or `:body`.\n\n  This function affects both started and non-started items in the send queues, but will not affect submissions that have not yet\n  made it to the network processing layer (things still in top-level transaction submission queue).\n\n  So the sequence of calls:\n\n  ```\n  (comp/transact! this `[(f)] {:abort-id :a})\n  (app/abort! this :a)\n  ```\n\n  will cancel anything active with abort id `:a`, but since you've held the thread the entire time the submission of\n  mutation `(f)` is still on the submission queue and will not be aborted.\n\n  - `app-ish`: Anything that can be coerced to an app with comp/any->app.\n  - `abort-id`: The abort ID of the operations to be aborted.\n  "],"~$headless-synchronous-app",["^ ","^:W",null,"^5",["^ ","^6","com/fulcrologic/fulcro/raw/application.cljc","^7",340,"^8",7,"^9",340,"^:",31,"^:X",["^1O",["^:Y",["^1O",[["~$faux-root"],["^<U","^;E"]]]]],"^;1","Returns a new instance from `fulcro-app` that is pre-configured to use synchronous transaction processing\n   and no rendering. This is particularly useful when you want to write integration tests around a Fulcro\n   app so that the tests need no async support. The `faux-root` must be a component (which need have no body).\n\n   The returned application will be properly initialized, and will have the initial state declared in `faux-component`\n   already merged into the app's state (i.e. the returned app is ready for operations).\n\n   `options` can be anything from `fulcro-app`, but :submit-transaction!, :render-root!, and\n   :optimized-render! are ignored.","^;T",["^ ","^;5",false,"^;U",2,"^;8",2,"^;2",[["^<U"],["^<U","^;E"]],"^:X",["^1O",[["^<U"],["^<U","^;E"]]],"^;4",["^1O",[null,null]]]],"^G","^3E","^6","com/fulcrologic/fulcro/raw/application.cljc","^:",31,"^;T",["^ ","^;5",false,"^;U",2,"^;8",2,"^;2",[["^<U"],["^<U","^;E"]],"^:X",["^1O",[["^<U"],["^<U","^;E"]]],"^;4",["^1O",[null,null]]],"^;2",[["^<U"],["^<U","^;E"]],"^;3",null,"^;U",2,"^;4",["^1O",[null,null]],"^8",1,"^;5",false,"^;V",[["^ ","^;U",1,"^;5",false,"^;W","^;7"],["^ ","^;U",2,"^;5",false,"^;W",["^F",["^;<","^;7"]]]],"^7",340,"^9",340,"^;8",2,"^;9",true,"^:X",["^1O",[["^<U"],["^<U","^;E"]]],"^;1","Returns a new instance from `fulcro-app` that is pre-configured to use synchronous transaction processing\n   and no rendering. This is particularly useful when you want to write integration tests around a Fulcro\n   app so that the tests need no async support. The `faux-root` must be a component (which need have no body).\n\n   The returned application will be properly initialized, and will have the initial state declared in `faux-component`\n   already merged into the app's state (i.e. the returned app is ready for operations).\n\n   `options` can be anything from `fulcro-app`, but :submit-transaction!, :render-root!, and\n   :optimized-render! are ignored."],"~$update-shared!",["^ ","^:W",null,"^5",["^ ","^6","com/fulcrologic/fulcro/raw/application.cljc","^7",42,"^8",7,"^9",42,"^:",21,"^:X",["^1O",["^:Y",["^1O",[[["^ ","~:com.fulcrologic.fulcro.application/keys",["~$runtime-atom"],"^1Q","^:Z"]]]]]],"^;1","Force shared props to be recalculated. This updates the shared props on the app, and future renders will see the\n   updated values. This is a no-op if no shared-fn is defined on the app. If you're using React 16+ consider using\n   Context instead of shared."],"^G","^3O","^6","com/fulcrologic/fulcro/raw/application.cljc","^:",21,"^;2",["^1O",[["~$p__62035"]]],"^;3",null,"^;4",["^1O",[null,null]],"^8",1,"^;5",false,"^7",42,"^9",42,"^;8",1,"^;9",true,"^:X",["^1O",["^:Y",["^1O",[[["^ ","^<W",["^<X"],"^1Q","^:Z"]]]]]],"^;1","Force shared props to be recalculated. This updates the shared props on the app, and future renders will see the\n   updated values. This is a no-op if no shared-fn is defined on the app. If you're using React 16+ consider using\n   Context instead of shared."],"~$default-remote-error?",["^ ","^:W",null,"^5",["^ ","^6","com/fulcrologic/fulcro/raw/application.cljc","^7",131,"^8",7,"^9",131,"^:",28,"^:X",["^1O",["^:Y",["^1O",[[["^ ","^;@",["~$status-code"]]]]]]],"^;1","Default detection of network errors. Returns true if the status-code of the given result\n  map is not 200."],"^G","^3P","^6","com/fulcrologic/fulcro/raw/application.cljc","^:",28,"^;2",["^1O",[["~$p__62169"]]],"^;3",null,"^;4",["^1O",[null,null]],"^8",1,"^;5",false,"^7",131,"^;6","^;L","^9",131,"^;8",1,"^;9",true,"^:X",["^1O",["^:Y",["^1O",[[["^ ","^;@",["^<["]]]]]]],"^;1","Default detection of network errors. Returns true if the status-code of the given result\n  map is not 200."],"~$remove-render-listener!",["^ ","^:W",null,"^5",["^ ","^6","com/fulcrologic/fulcro/raw/application.cljc","^7",335,"^8",7,"^9",335,"^:",30,"^:X",["^1O",["^:Y",["^1O",[["^:Z","^:["]]]]],"^;1","Remove the render listener named `nm`."],"^G","^4>","^6","com/fulcrologic/fulcro/raw/application.cljc","^:",30,"^;2",["^1O",[["^:Z","^:["]]],"^;3",null,"^;4",["^1O",[null,null]],"^8",1,"^;5",false,"^7",335,"^;6",["^F",[null,"^;7"]],"^9",335,"^;8",2,"^;9",true,"^:X",["^1O",["^:Y",["^1O",[["^:Z","^:["]]]]],"^;1","Remove the render listener named `nm`."],"~$set-remote!",["^ ","^:W",null,"^5",["^ ","^6","com/fulcrologic/fulcro/raw/application.cljc","^7",360,"^8",7,"^9",360,"^:",18,"^:X",["^1O",["^:Y",["^1O",[["^:Z","~$remote-name","~$remote"]]]]],"^;1","Add/replace a remote on the given app. `remote-name` is a keyword, and `remote` is a Fulcro remote (map containing\n  at least `transmit!`).\n\n  This function is *generally* safe to call at any time. Requests that are in-flight on an old version of the remote will complete\n  on that remote, and any that are queued will be processed by the new one; however, if the old remote supported abort\n  operations then an abort on in-flight requests of the old remote will not work (since you're replaced the remote that the details\n  about that request).\n\n  This function changes the content of the application's runtime atom so you do not need to capture the return value, which\n  is the app you passed in."],"^G","^3W","^6","com/fulcrologic/fulcro/raw/application.cljc","^:",18,"^;2",["^1O",[["^:Z","^=3","^=4"]]],"^;3",null,"^;4",["^1O",[null,null]],"^8",1,"^;5",false,"^7",360,"^9",360,"^;8",3,"^;9",true,"^:X",["^1O",["^:Y",["^1O",[["^:Z","^=3","^=4"]]]]],"^;1","Add/replace a remote on the given app. `remote-name` is a keyword, and `remote` is a Fulcro remote (map containing\n  at least `transmit!`).\n\n  This function is *generally* safe to call at any time. Requests that are in-flight on an old version of the remote will complete\n  on that remote, and any that are queued will be processed by the new one; however, if the old remote supported abort\n  operations then an abort on in-flight requests of the old remote will not work (since you're replaced the remote that the details\n  about that request).\n\n  This function changes the content of the application's runtime atom so you do not need to capture the return value, which\n  is the app you passed in."],"~$root-props-changed?",["^ ","^:W",null,"^5",["^ ","^6","com/fulcrologic/fulcro/raw/application.cljc","^7",61,"^8",7,"^9",61,"^:",26,"^:X",["^1O",["^:Y",["^1O",[["^:Z"]]]]],"^;1","Returns true if the props queries directly by the root component of the app (if mounted) have changed since the last\n  render.  This is a shallow analysis such that, for example, a join from root (in a normalized db) will be checked as a difference\n  of idents that the root prop points to.  This can be used for determining if things like shared-fn need to be re-run,\n  and if it would simply be quicker to keyframe render the entire tree.\n\n  This is a naiv√© algorithm that is essentially `select-keys` on the root props. It does not interpret the query in\n  any way."],"^G","^3Y","^6","com/fulcrologic/fulcro/raw/application.cljc","^:",26,"^;2",["^1O",[["^:Z"]]],"^;3",null,"^;4",["^1O",[null,null]],"^8",1,"^;5",false,"^7",61,"^;6","^;L","^9",61,"^;8",1,"^;9",true,"^:X",["^1O",["^:Y",["^1O",[["^:Z"]]]]],"^;1","Returns true if the props queries directly by the root component of the app (if mounted) have changed since the last\n  render.  This is a shallow analysis such that, for example, a join from root (in a normalized db) will be checked as a difference\n  of idents that the root prop points to.  This can be used for determining if things like shared-fn need to be re-run,\n  and if it would simply be quicker to keyframe render the entire tree.\n\n  This is a naiv√© algorithm that is essentially `select-keys` on the root props. It does not interpret the query in\n  any way."],"~$default-tx!",["^ ","^G","^3[","^6","com/fulcrologic/fulcro/raw/application.cljc","^7",182,"^8",1,"^9",182,"^:",30,"~:deprecated",true,"^5",["^ ","^6","com/fulcrologic/fulcro/raw/application.cljc","^7",182,"^8",19,"^9",182,"^:",30,"^=7",true]],"~$remove-root!",["^ ","^:W",null,"^5",["^ ","^6","com/fulcrologic/fulcro/raw/application.cljc","^7",434,"^8",7,"^9",434,"^:",19,"^:X",["^1O",["^:Y",["^1O",[["^:Z","^;H"]]]]],"^;1","Remove a root key managed subtree from Fulcro. Does not garbage collect, just stops updating the callback."],"^G","^45","^6","com/fulcrologic/fulcro/raw/application.cljc","^:",19,"^;2",["^1O",[["^:Z","^;H"]]],"^;3",null,"^;4",["^1O",[null,null]],"^8",1,"^;5",false,"^7",434,"^;6",["^F",[null,"^;7"]],"^9",434,"^;8",2,"^;9",true,"^:X",["^1O",["^:Y",["^1O",[["^:Z","^;H"]]]]],"^;1","Remove a root key managed subtree from Fulcro. Does not garbage collect, just stops updating the callback."]],"^1M",["^ ","^11","^11","^S","^T","^Z","^[","^[","^[","^T","^T","^1F","^1F","^1G","^1F"],"~:cljs.analyzer/constants",["^ ","^1I",["^F",["~:com.fulcrologic.fulcro.application/mount-node","~:com.fulcrologic.fulcro.algorithm/initialize-state!","~:remote","~:initial-params","~:props-middleware","~:com.fulcrologic.fulcro.algorithm/render!","~:keep-existing?","~:com.fulcrologic.fulcro.application/config","~:com.fulcrologic.fulcro.algorithm/shared-fn","~:com.fulcrologic.fulcro.algorithm/default-result-action!","~:com.fulcrologic.fulcro.algorithms.tx-processing/queue-processing-scheduled?","~:replace","~:com.fulcrologic.fulcro.application/indexes","~:load-mutation","~:com.fulcrologic.fulcro.algorithm/props-middleware","~:com.fulcrologic.fulcro.algorithm/batch-notifications","~:remotes","~:com.fulcrologic.fulcro.application/last-rendered-state","~:com.fulcrologic.fulcro.algorithm/schedule-render!","~:com.fulcrologic.fulcro.application/static-shared-props","~:client-will-mount","~:com.fulcrologic.fulcro.algorithm/abort!","~:core-render!","~:com.fulcrologic.fulcro.algorithms.tx-processing/sends-scheduled?","~:hydrate-root!","~:global-eql-transform","~:com.fulcrologic.fulcro.application/render-listeners","~:root-props","~:com.fulcrologic.fulcro.algorithm/tx!","~:force-root?","~:status-code","~:receive-props","~:com.fulcrologic.fulcro.application/state-atom","~:com.fulcrologic.fulcro.application/only-refresh","~:abort!","~:com.fulcrologic.fulcro.application/id","~:com.fulcrologic.fulcro.algorithm/core-render!","~:com.fulcrologic.fulcro.algorithm/global-eql-transform","~:fatal","~:com.fulcrologic.fulcro.algorithm/drop-component!","~:com.fulcrologic.fulcro.algorithm/hydrate-root!","~:com.fulcrologic.fulcro.algorithm/index-component!","~:shared-fn","~:load-marker-default","~:transmit!","~:com.fulcrologic.fulcro.application/root-class","~:com.fulcrologic.fulcro.algorithm/unmount-root!","~:com.fulcrologic.fulcro.application/to-refresh","~:com.fulcrologic.fulcro.application/basis-t","~:com.fulcrologic.fulcro.algorithm/remote-error?","~:root-props-changed?","~:render-root!","~:com.fulcrologic.fulcro.application/runtime-atom","~:optimized-render!","~:submit-transaction!","~:ident","~:root-class","~:info","~:abort-transaction!","~:com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue","~:com.fulcrologic.fulcro.algorithms.tx-processing/active-queue","~:com.fulcrologic.fulcro.application/algorithms","~:shared","~:remote-error?","~:com.fulcrologic.fulcro.algorithm/render-root!","~:com.fulcrologic.fulcro.algorithm/global-error-action","~:error","~:ident->components","~:com.fulcrologic.fulcro.algorithm/optimized-render!","~:com.fulcrologic.fulcro.application/mutate","~:started-callback","~:com.fulcrologic.fulcro.algorithms.tx-processing/send-queues","~:com.fulcrologic.fulcro.algorithm/render-middleware","~:com.fulcrologic.fulcro.application/root-factory","~:default-result-action!","~:initialize?","~:com.fulcrologic.fulcro.algorithm/index-root!","~:external-config","~:body","~:com.fulcrologic.fulcro.application/shared-props","~:global-error-action","~:com.fulcrologic.fulcro.algorithms.tx-processing/activation-scheduled?","~:batch-notifications","~:auto","~:com.fulcrologic.fulcro.algorithms.tx-processing/after-render","~:p","~:unmount-root!","~:com.fulcrologic.fulcro.application/remotes","~:com.fulcrologic.fulcro.algorithm/merge*","~:render-middleware","~:com.fulcrologic.fulcro.application/app-root","~:initial-db","~:com.fulcrologic.fulcro.application/render-scheduled?","~:client-did-mount","~:com.fulcrologic.fulcro.algorithms.tx-processing/result-handler","~:query-transform-default"]],"~:order",["^>>","^>B","^=Z","^>P","~:p~:ns-specs",["^ "],"~:ns-spec-vars",["^F",[]],"~:compiler-options",["^4@",[["^?D","~:static-fns"],true,["^?D","~:shadow-tweaks"],null,["^?D","~:source-map-inline"],null,["^?D","~:elide-asserts"],false,["^?D","~:optimize-constants"],null,["^?D","^1Z"],null,["^?D","^>["],null,["^?D","~:tooling-config"],null,["^?D","~:emit-constants"],null,["^?D","~:load-tests"],null,["^?D","~:form-size-threshold"],null,["^?D","~:global-goog-object&array"],null,["^?D","~:data-readers"],null,["^?D","~:infer-externs"],"^?5",["^?D","^20"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^?D","~:fn-invoke-direct"],null,["^?D","~:source-map"],"/dev/null"]]]