; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Starting Jack-in Terminal: clojure -Sdeps '{:deps {nrepl/nrepl {:mvn/version,"0.9.0"},cider/cider-nrepl {:mvn/version,"0.27.4"}}}' -M:dev -m nrepl.cmdline --middleware "[cider.nrepl/cider-middleware]"
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS: 
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉user꞉> 
; Jack-in done.
clj꞉user꞉> 
nil
clj꞉user꞉> 
nil
clj꞉app.parser꞉> 
#'app.parser/people-table
clj꞉app.parser꞉> 
#'app.parser/list-table
clj꞉app.parser꞉> 
#'app.parser/person-resolver
clj꞉app.parser꞉> 
#'app.parser/api-parser
clj꞉app.parser꞉> 
#'app.parser/resolvers
clj꞉app.parser꞉> 
#'app.parser/pathom-parser
clj꞉app.parser꞉> 
#function[clojure.lang.AFunction/1]
clj꞉user꞉> 
:reloading (app.parser app.server user)
#function[clojure.lang.AFunction/1]
clj꞉user꞉> 
#'app.parser/document-table
clj꞉app.parser꞉> 
[] - failed: (<= 1 (count %) MAX_VALUE) in: [:com.wsscode.pathom.connect/output] at: [:com.wsscode.pathom.connect/output :attribute-list] spec: :com.wsscode.pathom.connect/output
[] - failed: map? in: [:com.wsscode.pathom.connect/output] at: [:com.wsscode.pathom.connect/output :union] spec: :com.wsscode.pathom.connect/output
; Execution error (ExceptionInfo) at com.wsscode.pathom.connect/resolver (connect.cljc:1560).
; Invalid options on resolver of app.parser/document-resolver
clj꞉app.parser꞉> 
#'app.parser/people-table
clj꞉app.parser꞉> 
#'app.parser/document-table
clj꞉app.parser꞉> 
#'app.parser/document-resolver
clj꞉app.parser꞉> 
#'app.parser/resolvers
clj꞉app.parser꞉> 
:reloading (app.parser app.server user)
#function[clojure.lang.AFunction/1]
clj꞉user꞉> 
#'app.parser/files-table
clj꞉app.parser꞉> 
#'app.parser/people-table
clj꞉app.parser꞉> 
#'app.parser/files-resolver
clj꞉app.parser꞉> 
#'app.parser/resolvers
clj꞉app.parser꞉> 
:reloading (app.parser app.server user)
#function[clojure.lang.AFunction/1]
clj꞉user꞉> 
#'app.parser/person-resolver
clj꞉app.parser꞉> 
:reloading (app.parser app.server user)
#function[clojure.lang.AFunction/1]
clj꞉user꞉> 
#'app.parser/files-resolver
clj꞉app.parser꞉> 
:reloading ()
#function[clojure.lang.AFunction/1]
clj꞉user꞉> 
#'app.parser/people-table
clj꞉app.parser꞉> 
#'app.parser/files-table
clj꞉app.parser꞉> 
#'app.parser/person-resolver
clj꞉app.parser꞉> 
#'app.parser/files-table
clj꞉app.parser꞉> 
nil
clj꞉app.parser꞉> 
#'app.parser/people-table
clj꞉app.parser꞉> 
#'app.parser/document-table
clj꞉app.parser꞉> 
:reloading (app.parser app.server user)
#function[clojure.lang.AFunction/1]
clj꞉user꞉> 
#'app.parser/person-resolver
clj꞉app.parser꞉> 
#'app.parser/document-resolver
clj꞉app.parser꞉> 
#'app.parser/files-resolver
clj꞉app.parser꞉> 
#'app.parser/files-resolver
clj꞉app.parser꞉> 
:reloading (app.parser app.server user)
#function[clojure.lang.AFunction/1]
clj꞉user꞉> 
#'app.parser/files-resolver
clj꞉app.parser꞉> 
:reloading (app.parser app.server user)
#function[clojure.lang.AFunction/1]
clj꞉user꞉> 
#'app.parser/files-resolver
clj꞉app.parser꞉> 
:reloading (app.parser app.server user)
#function[clojure.lang.AFunction/1]
clj꞉user꞉> 
#'app.parser/files-resolver
clj꞉app.parser꞉> 
#'app.parser/files-resolver
clj꞉app.parser꞉> 
#'app.parser/resolvers
clj꞉app.parser꞉> 
:reloading (app.parser app.server user)
#function[clojure.lang.AFunction/1]
clj꞉user꞉> 
#'app.parser/person-resolver
clj꞉app.parser꞉> 
:reloading (app.parser app.server user)
#function[clojure.lang.AFunction/1]
clj꞉user꞉> 
#'app.parser/person-resolver
clj꞉app.parser꞉> 
#'app.parser/files-resolver
clj꞉app.parser꞉> 
:reloading (app.parser app.server user)
#function[clojure.lang.AFunction/1]
clj꞉user꞉> 
#'app.parser/files-resolver
clj꞉app.parser꞉> 
:reloading (app.parser app.server user)
#function[clojure.lang.AFunction/1]
clj꞉user꞉> 
